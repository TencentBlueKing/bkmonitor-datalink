// Tencent is pleased to support the open source community by making
// 蓝鲸智云 - 监控平台 (BlueKing - Monitor) available.
// Copyright (C) 2022 THL A29 Limited, a Tencent company. All rights reserved.
// Licensed under the MIT License (the "License"); you may not use this file except in compliance with the License.
// You may obtain a copy of the License at http://opensource.org/licenses/MIT
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.

// Code generated by MockGen. DO NOT EDIT.
// Source: transfer/consul (interfaces: ClientAPI,KvAPI,SessionAPI,AgentAPI,HealthAPI,WatchPlan,ServicePlugin,DispatchConverter,ShadowCopier)

// Package consul_test is a generated GoMock package.
package consul_test

import (
	reflect "reflect"

	EventBus "github.com/asaskevich/EventBus"
	gomock "github.com/golang/mock/gomock"
	api "github.com/hashicorp/consul/api"
	watch "github.com/hashicorp/consul/api/watch"

	consul "github.com/TencentBlueKing/bkmonitor-datalink/pkg/transfer/consul"
	define "github.com/TencentBlueKing/bkmonitor-datalink/pkg/transfer/define"
)

// MockClientAPI is a mock of ClientAPI interface.
type MockClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockClientAPIMockRecorder
}

// MockClientAPIMockRecorder is the mock recorder for MockClientAPI.
type MockClientAPIMockRecorder struct {
	mock *MockClientAPI
}

// NewMockClientAPI creates a new mock instance.
func NewMockClientAPI(ctrl *gomock.Controller) *MockClientAPI {
	mock := &MockClientAPI{ctrl: ctrl}
	mock.recorder = &MockClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientAPI) EXPECT() *MockClientAPIMockRecorder {
	return m.recorder
}

// Agent mocks base method.
func (m *MockClientAPI) Agent() consul.AgentAPI {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Agent")
	ret0, _ := ret[0].(consul.AgentAPI)
	return ret0
}

// Agent indicates an expected call of Agent.
func (mr *MockClientAPIMockRecorder) Agent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Agent", reflect.TypeOf((*MockClientAPI)(nil).Agent))
}

// Health mocks base method.
func (m *MockClientAPI) Health() consul.HealthAPI {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Health")
	ret0, _ := ret[0].(consul.HealthAPI)
	return ret0
}

// Health indicates an expected call of Health.
func (mr *MockClientAPIMockRecorder) Health() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Health", reflect.TypeOf((*MockClientAPI)(nil).Health))
}

// KV mocks base method.
func (m *MockClientAPI) KV() consul.KvAPI {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KV")
	ret0, _ := ret[0].(consul.KvAPI)
	return ret0
}

// KV indicates an expected call of KV.
func (mr *MockClientAPIMockRecorder) KV() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KV", reflect.TypeOf((*MockClientAPI)(nil).KV))
}

// Raw mocks base method.
func (m *MockClientAPI) Raw() *api.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Raw")
	ret0, _ := ret[0].(*api.Client)
	return ret0
}

// Raw indicates an expected call of Raw.
func (mr *MockClientAPIMockRecorder) Raw() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Raw", reflect.TypeOf((*MockClientAPI)(nil).Raw))
}

// Session mocks base method.
func (m *MockClientAPI) Session() consul.SessionAPI {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Session")
	ret0, _ := ret[0].(consul.SessionAPI)
	return ret0
}

// Session indicates an expected call of Session.
func (mr *MockClientAPIMockRecorder) Session() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Session", reflect.TypeOf((*MockClientAPI)(nil).Session))
}

// MockKvAPI is a mock of KvAPI interface.
type MockKvAPI struct {
	ctrl     *gomock.Controller
	recorder *MockKvAPIMockRecorder
}

// MockKvAPIMockRecorder is the mock recorder for MockKvAPI.
type MockKvAPIMockRecorder struct {
	mock *MockKvAPI
}

// NewMockKvAPI creates a new mock instance.
func NewMockKvAPI(ctrl *gomock.Controller) *MockKvAPI {
	mock := &MockKvAPI{ctrl: ctrl}
	mock.recorder = &MockKvAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKvAPI) EXPECT() *MockKvAPIMockRecorder {
	return m.recorder
}

// Acquire mocks base method.
func (m *MockKvAPI) Acquire(arg0 *api.KVPair, arg1 *api.WriteOptions) (bool, *api.WriteMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Acquire", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*api.WriteMeta)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Acquire indicates an expected call of Acquire.
func (mr *MockKvAPIMockRecorder) Acquire(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Acquire", reflect.TypeOf((*MockKvAPI)(nil).Acquire), arg0, arg1)
}

// Delete mocks base method.
func (m *MockKvAPI) Delete(arg0 string, arg1 *api.WriteOptions) (*api.WriteMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(*api.WriteMeta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockKvAPIMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockKvAPI)(nil).Delete), arg0, arg1)
}

// DeleteTree mocks base method.
func (m *MockKvAPI) DeleteTree(arg0 string, arg1 *api.WriteOptions) (*api.WriteMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTree", arg0, arg1)
	ret0, _ := ret[0].(*api.WriteMeta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTree indicates an expected call of DeleteTree.
func (mr *MockKvAPIMockRecorder) DeleteTree(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTree", reflect.TypeOf((*MockKvAPI)(nil).DeleteTree), arg0, arg1)
}

// Get mocks base method.
func (m *MockKvAPI) Get(arg0 string, arg1 *api.QueryOptions) (*api.KVPair, *api.QueryMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*api.KVPair)
	ret1, _ := ret[1].(*api.QueryMeta)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockKvAPIMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockKvAPI)(nil).Get), arg0, arg1)
}

// Keys mocks base method.
func (m *MockKvAPI) Keys(arg0, arg1 string, arg2 *api.QueryOptions) ([]string, *api.QueryMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Keys", arg0, arg1, arg2)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(*api.QueryMeta)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Keys indicates an expected call of Keys.
func (mr *MockKvAPIMockRecorder) Keys(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Keys", reflect.TypeOf((*MockKvAPI)(nil).Keys), arg0, arg1, arg2)
}

// List mocks base method.
func (m *MockKvAPI) List(arg0 string, arg1 *api.QueryOptions) (api.KVPairs, *api.QueryMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].(api.KVPairs)
	ret1, _ := ret[1].(*api.QueryMeta)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockKvAPIMockRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockKvAPI)(nil).List), arg0, arg1)
}

// Put mocks base method.
func (m *MockKvAPI) Put(arg0 *api.KVPair, arg1 *api.WriteOptions) (*api.WriteMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", arg0, arg1)
	ret0, _ := ret[0].(*api.WriteMeta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Put indicates an expected call of Put.
func (mr *MockKvAPIMockRecorder) Put(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockKvAPI)(nil).Put), arg0, arg1)
}

// Release mocks base method.
func (m *MockKvAPI) Release(arg0 *api.KVPair, arg1 *api.WriteOptions) (bool, *api.WriteMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Release", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*api.WriteMeta)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Release indicates an expected call of Release.
func (mr *MockKvAPIMockRecorder) Release(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Release", reflect.TypeOf((*MockKvAPI)(nil).Release), arg0, arg1)
}

// MockSessionAPI is a mock of SessionAPI interface.
type MockSessionAPI struct {
	ctrl     *gomock.Controller
	recorder *MockSessionAPIMockRecorder
}

// MockSessionAPIMockRecorder is the mock recorder for MockSessionAPI.
type MockSessionAPIMockRecorder struct {
	mock *MockSessionAPI
}

// NewMockSessionAPI creates a new mock instance.
func NewMockSessionAPI(ctrl *gomock.Controller) *MockSessionAPI {
	mock := &MockSessionAPI{ctrl: ctrl}
	mock.recorder = &MockSessionAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionAPI) EXPECT() *MockSessionAPIMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSessionAPI) Create(arg0 *api.SessionEntry, arg1 *api.WriteOptions) (string, *api.WriteMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*api.WriteMeta)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Create indicates an expected call of Create.
func (mr *MockSessionAPIMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSessionAPI)(nil).Create), arg0, arg1)
}

// Destroy mocks base method.
func (m *MockSessionAPI) Destroy(arg0 string, arg1 *api.WriteOptions) (*api.WriteMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Destroy", arg0, arg1)
	ret0, _ := ret[0].(*api.WriteMeta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Destroy indicates an expected call of Destroy.
func (mr *MockSessionAPIMockRecorder) Destroy(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockSessionAPI)(nil).Destroy), arg0, arg1)
}

// Renew mocks base method.
func (m *MockSessionAPI) Renew(arg0 string, arg1 *api.WriteOptions) (*api.SessionEntry, *api.WriteMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Renew", arg0, arg1)
	ret0, _ := ret[0].(*api.SessionEntry)
	ret1, _ := ret[1].(*api.WriteMeta)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Renew indicates an expected call of Renew.
func (mr *MockSessionAPIMockRecorder) Renew(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Renew", reflect.TypeOf((*MockSessionAPI)(nil).Renew), arg0, arg1)
}

// MockAgentAPI is a mock of AgentAPI interface.
type MockAgentAPI struct {
	ctrl     *gomock.Controller
	recorder *MockAgentAPIMockRecorder
}

// MockAgentAPIMockRecorder is the mock recorder for MockAgentAPI.
type MockAgentAPIMockRecorder struct {
	mock *MockAgentAPI
}

// NewMockAgentAPI creates a new mock instance.
func NewMockAgentAPI(ctrl *gomock.Controller) *MockAgentAPI {
	mock := &MockAgentAPI{ctrl: ctrl}
	mock.recorder = &MockAgentAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAgentAPI) EXPECT() *MockAgentAPIMockRecorder {
	return m.recorder
}

// DisableServiceMaintenance mocks base method.
func (m *MockAgentAPI) DisableServiceMaintenance(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableServiceMaintenance", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DisableServiceMaintenance indicates an expected call of DisableServiceMaintenance.
func (mr *MockAgentAPIMockRecorder) DisableServiceMaintenance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableServiceMaintenance", reflect.TypeOf((*MockAgentAPI)(nil).DisableServiceMaintenance), arg0)
}

// EnableServiceMaintenance mocks base method.
func (m *MockAgentAPI) EnableServiceMaintenance(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableServiceMaintenance", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnableServiceMaintenance indicates an expected call of EnableServiceMaintenance.
func (mr *MockAgentAPIMockRecorder) EnableServiceMaintenance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableServiceMaintenance", reflect.TypeOf((*MockAgentAPI)(nil).EnableServiceMaintenance), arg0, arg1)
}

// Service mocks base method.
func (m *MockAgentAPI) Service(arg0 string, arg1 *api.QueryOptions) (*api.AgentService, *api.QueryMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Service", arg0, arg1)
	ret0, _ := ret[0].(*api.AgentService)
	ret1, _ := ret[1].(*api.QueryMeta)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Service indicates an expected call of Service.
func (mr *MockAgentAPIMockRecorder) Service(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Service", reflect.TypeOf((*MockAgentAPI)(nil).Service), arg0, arg1)
}

// ServiceDeregister mocks base method.
func (m *MockAgentAPI) ServiceDeregister(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceDeregister", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ServiceDeregister indicates an expected call of ServiceDeregister.
func (mr *MockAgentAPIMockRecorder) ServiceDeregister(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceDeregister", reflect.TypeOf((*MockAgentAPI)(nil).ServiceDeregister), arg0)
}

// ServiceRegister mocks base method.
func (m *MockAgentAPI) ServiceRegister(arg0 *api.AgentServiceRegistration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceRegister", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ServiceRegister indicates an expected call of ServiceRegister.
func (mr *MockAgentAPIMockRecorder) ServiceRegister(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceRegister", reflect.TypeOf((*MockAgentAPI)(nil).ServiceRegister), arg0)
}

// Services mocks base method.
func (m *MockAgentAPI) Services() (map[string]*api.AgentService, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Services")
	ret0, _ := ret[0].(map[string]*api.AgentService)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Services indicates an expected call of Services.
func (mr *MockAgentAPIMockRecorder) Services() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Services", reflect.TypeOf((*MockAgentAPI)(nil).Services))
}

// UpdateTTL mocks base method.
func (m *MockAgentAPI) UpdateTTL(arg0, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTTL", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTTL indicates an expected call of UpdateTTL.
func (mr *MockAgentAPIMockRecorder) UpdateTTL(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTTL", reflect.TypeOf((*MockAgentAPI)(nil).UpdateTTL), arg0, arg1, arg2)
}

// MockHealthAPI is a mock of HealthAPI interface.
type MockHealthAPI struct {
	ctrl     *gomock.Controller
	recorder *MockHealthAPIMockRecorder
}

// MockHealthAPIMockRecorder is the mock recorder for MockHealthAPI.
type MockHealthAPIMockRecorder struct {
	mock *MockHealthAPI
}

// NewMockHealthAPI creates a new mock instance.
func NewMockHealthAPI(ctrl *gomock.Controller) *MockHealthAPI {
	mock := &MockHealthAPI{ctrl: ctrl}
	mock.recorder = &MockHealthAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHealthAPI) EXPECT() *MockHealthAPIMockRecorder {
	return m.recorder
}

// Service mocks base method.
func (m *MockHealthAPI) Service(arg0, arg1 string, arg2 bool, arg3 *api.QueryOptions) ([]*api.ServiceEntry, *api.QueryMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Service", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*api.ServiceEntry)
	ret1, _ := ret[1].(*api.QueryMeta)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Service indicates an expected call of Service.
func (mr *MockHealthAPIMockRecorder) Service(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Service", reflect.TypeOf((*MockHealthAPI)(nil).Service), arg0, arg1, arg2, arg3)
}

// MockWatchPlan is a mock of WatchPlan interface.
type MockWatchPlan struct {
	ctrl     *gomock.Controller
	recorder *MockWatchPlanMockRecorder
}

// MockWatchPlanMockRecorder is the mock recorder for MockWatchPlan.
type MockWatchPlanMockRecorder struct {
	mock *MockWatchPlan
}

// NewMockWatchPlan creates a new mock instance.
func NewMockWatchPlan(ctrl *gomock.Controller) *MockWatchPlan {
	mock := &MockWatchPlan{ctrl: ctrl}
	mock.recorder = &MockWatchPlanMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWatchPlan) EXPECT() *MockWatchPlanMockRecorder {
	return m.recorder
}

// IsStopped mocks base method.
func (m *MockWatchPlan) IsStopped() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsStopped")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsStopped indicates an expected call of IsStopped.
func (mr *MockWatchPlanMockRecorder) IsStopped() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsStopped", reflect.TypeOf((*MockWatchPlan)(nil).IsStopped))
}

// Run mocks base method.
func (m *MockWatchPlan) Run(arg0 consul.ClientAPI) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockWatchPlanMockRecorder) Run(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockWatchPlan)(nil).Run), arg0)
}

// SetHandler mocks base method.
func (m *MockWatchPlan) SetHandler(arg0 watch.HandlerFunc) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHandler", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHandler indicates an expected call of SetHandler.
func (mr *MockWatchPlanMockRecorder) SetHandler(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHandler", reflect.TypeOf((*MockWatchPlan)(nil).SetHandler), arg0)
}

// Stop mocks base method.
func (m *MockWatchPlan) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockWatchPlanMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockWatchPlan)(nil).Stop))
}

// MockServicePlugin is a mock of ServicePlugin interface.
type MockServicePlugin struct {
	ctrl     *gomock.Controller
	recorder *MockServicePluginMockRecorder
}

// MockServicePluginMockRecorder is the mock recorder for MockServicePlugin.
type MockServicePluginMockRecorder struct {
	mock *MockServicePlugin
}

// NewMockServicePlugin creates a new mock instance.
func NewMockServicePlugin(ctrl *gomock.Controller) *MockServicePlugin {
	mock := &MockServicePlugin{ctrl: ctrl}
	mock.recorder = &MockServicePluginMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServicePlugin) EXPECT() *MockServicePluginMockRecorder {
	return m.recorder
}

// Disable mocks base method.
func (m *MockServicePlugin) Disable() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Disable")
	ret0, _ := ret[0].(error)
	return ret0
}

// Disable indicates an expected call of Disable.
func (mr *MockServicePluginMockRecorder) Disable() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Disable", reflect.TypeOf((*MockServicePlugin)(nil).Disable))
}

// Enable mocks base method.
func (m *MockServicePlugin) Enable() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Enable")
	ret0, _ := ret[0].(error)
	return ret0
}

// Enable indicates an expected call of Enable.
func (mr *MockServicePluginMockRecorder) Enable() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Enable", reflect.TypeOf((*MockServicePlugin)(nil).Enable))
}

// EventBus mocks base method.
func (m *MockServicePlugin) EventBus() EventBus.Bus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventBus")
	ret0, _ := ret[0].(EventBus.Bus)
	return ret0
}

// EventBus indicates an expected call of EventBus.
func (mr *MockServicePluginMockRecorder) EventBus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventBus", reflect.TypeOf((*MockServicePlugin)(nil).EventBus))
}

// Info mocks base method.
func (m *MockServicePlugin) Info(arg0 define.ServiceType) ([]*define.ServiceInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Info", arg0)
	ret0, _ := ret[0].([]*define.ServiceInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Info indicates an expected call of Info.
func (mr *MockServicePluginMockRecorder) Info(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockServicePlugin)(nil).Info), arg0)
}

// Root mocks base method.
func (m *MockServicePlugin) Root() define.Service {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Root")
	ret0, _ := ret[0].(define.Service)
	return ret0
}

// Root indicates an expected call of Root.
func (mr *MockServicePluginMockRecorder) Root() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Root", reflect.TypeOf((*MockServicePlugin)(nil).Root))
}

// Session mocks base method.
func (m *MockServicePlugin) Session() define.Session {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Session")
	ret0, _ := ret[0].(define.Session)
	return ret0
}

// Session indicates an expected call of Session.
func (mr *MockServicePluginMockRecorder) Session() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Session", reflect.TypeOf((*MockServicePlugin)(nil).Session))
}

// Start mocks base method.
func (m *MockServicePlugin) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockServicePluginMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockServicePlugin)(nil).Start))
}

// Stop mocks base method.
func (m *MockServicePlugin) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockServicePluginMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockServicePlugin)(nil).Stop))
}

// Wait mocks base method.
func (m *MockServicePlugin) Wait() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Wait")
	ret0, _ := ret[0].(error)
	return ret0
}

// Wait indicates an expected call of Wait.
func (mr *MockServicePluginMockRecorder) Wait() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wait", reflect.TypeOf((*MockServicePlugin)(nil).Wait))
}

// Wrap mocks base method.
func (m *MockServicePlugin) Wrap(arg0 define.Service) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Wrap", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Wrap indicates an expected call of Wrap.
func (mr *MockServicePluginMockRecorder) Wrap(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wrap", reflect.TypeOf((*MockServicePlugin)(nil).Wrap), arg0)
}

// MockDispatchConverter is a mock of DispatchConverter interface.
type MockDispatchConverter struct {
	ctrl     *gomock.Controller
	recorder *MockDispatchConverterMockRecorder
}

// MockDispatchConverterMockRecorder is the mock recorder for MockDispatchConverter.
type MockDispatchConverterMockRecorder struct {
	mock *MockDispatchConverter
}

// NewMockDispatchConverter creates a new mock instance.
func NewMockDispatchConverter(ctrl *gomock.Controller) *MockDispatchConverter {
	mock := &MockDispatchConverter{ctrl: ctrl}
	mock.recorder = &MockDispatchConverterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDispatchConverter) EXPECT() *MockDispatchConverterMockRecorder {
	return m.recorder
}

// ElementCreator mocks base method.
func (m *MockDispatchConverter) ElementCreator(arg0 *api.KVPair) ([]define.IDer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ElementCreator", arg0)
	ret0, _ := ret[0].([]define.IDer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ElementCreator indicates an expected call of ElementCreator.
func (mr *MockDispatchConverterMockRecorder) ElementCreator(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ElementCreator", reflect.TypeOf((*MockDispatchConverter)(nil).ElementCreator), arg0)
}

// NodeCreator mocks base method.
func (m *MockDispatchConverter) NodeCreator(arg0 *define.ServiceInfo) (define.IDer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NodeCreator", arg0)
	ret0, _ := ret[0].(define.IDer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeCreator indicates an expected call of NodeCreator.
func (mr *MockDispatchConverterMockRecorder) NodeCreator(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeCreator", reflect.TypeOf((*MockDispatchConverter)(nil).NodeCreator), arg0)
}

// ShadowCreator mocks base method.
func (m *MockDispatchConverter) ShadowCreator(arg0, arg1 define.IDer) (string, string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShadowCreator", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(string)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// ShadowCreator indicates an expected call of ShadowCreator.
func (mr *MockDispatchConverterMockRecorder) ShadowCreator(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShadowCreator", reflect.TypeOf((*MockDispatchConverter)(nil).ShadowCreator), arg0, arg1)
}

// ShadowDetector mocks base method.
func (m *MockDispatchConverter) ShadowDetector(arg0 *api.KVPair) (string, string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShadowDetector", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(string)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// ShadowDetector indicates an expected call of ShadowDetector.
func (mr *MockDispatchConverterMockRecorder) ShadowDetector(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShadowDetector", reflect.TypeOf((*MockDispatchConverter)(nil).ShadowDetector), arg0)
}

// MockShadowCopier is a mock of ShadowCopier interface.
type MockShadowCopier struct {
	ctrl     *gomock.Controller
	recorder *MockShadowCopierMockRecorder
}

// MockShadowCopierMockRecorder is the mock recorder for MockShadowCopier.
type MockShadowCopierMockRecorder struct {
	mock *MockShadowCopier
}

// NewMockShadowCopier creates a new mock instance.
func NewMockShadowCopier(ctrl *gomock.Controller) *MockShadowCopier {
	mock := &MockShadowCopier{ctrl: ctrl}
	mock.recorder = &MockShadowCopierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShadowCopier) EXPECT() *MockShadowCopierMockRecorder {
	return m.recorder
}

// Clear mocks base method.
func (m *MockShadowCopier) Clear() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Clear")
}

// Clear indicates an expected call of Clear.
func (mr *MockShadowCopierMockRecorder) Clear() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clear", reflect.TypeOf((*MockShadowCopier)(nil).Clear))
}

// Each mocks base method.
func (m *MockShadowCopier) Each(arg0 func(string, string, *consul.ShadowInfo) bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Each", arg0)
}

// Each indicates an expected call of Each.
func (mr *MockShadowCopierMockRecorder) Each(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Each", reflect.TypeOf((*MockShadowCopier)(nil).Each), arg0)
}

// IsLink mocks base method.
func (m *MockShadowCopier) IsLink(arg0, arg1 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsLink", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsLink indicates an expected call of IsLink.
func (mr *MockShadowCopierMockRecorder) IsLink(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsLink", reflect.TypeOf((*MockShadowCopier)(nil).IsLink), arg0, arg1)
}

// Link mocks base method.
func (m *MockShadowCopier) Link(arg0, arg1, arg2 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Link", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Link indicates an expected call of Link.
func (mr *MockShadowCopierMockRecorder) Link(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Link", reflect.TypeOf((*MockShadowCopier)(nil).Link), arg0, arg1, arg2)
}

// Start mocks base method.
func (m *MockShadowCopier) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockShadowCopierMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockShadowCopier)(nil).Start))
}

// Stop mocks base method.
func (m *MockShadowCopier) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockShadowCopierMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockShadowCopier)(nil).Stop))
}

// Sync mocks base method.
func (m *MockShadowCopier) Sync(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sync", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Sync indicates an expected call of Sync.
func (mr *MockShadowCopierMockRecorder) Sync(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sync", reflect.TypeOf((*MockShadowCopier)(nil).Sync), arg0, arg1)
}

// SyncAll mocks base method.
func (m *MockShadowCopier) SyncAll() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncAll")
	ret0, _ := ret[0].(error)
	return ret0
}

// SyncAll indicates an expected call of SyncAll.
func (mr *MockShadowCopierMockRecorder) SyncAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncAll", reflect.TypeOf((*MockShadowCopier)(nil).SyncAll))
}

// Unlink mocks base method.
func (m *MockShadowCopier) Unlink(arg0, arg1 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unlink", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Unlink indicates an expected call of Unlink.
func (mr *MockShadowCopierMockRecorder) Unlink(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unlink", reflect.TypeOf((*MockShadowCopier)(nil).Unlink), arg0, arg1)
}

// Wait mocks base method.
func (m *MockShadowCopier) Wait() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Wait")
	ret0, _ := ret[0].(error)
	return ret0
}

// Wait indicates an expected call of Wait.
func (mr *MockShadowCopierMockRecorder) Wait() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wait", reflect.TypeOf((*MockShadowCopier)(nil).Wait))
}
