// Tencent is pleased to support the open source community by making
// 蓝鲸智云 - 监控平台 (BlueKing - Monitor) available.
// Copyright (C) 2022 THL A29 Limited, a Tencent company. All rights reserved.
// Licensed under the MIT License (the "License"); you may not use this file except in compliance with the License.
// You may obtain a copy of the License at http://opensource.org/licenses/MIT
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.

// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package define

import (
	"fmt"
)

// CharSetDecoderCreator : function to create CharSetDecoder
type CharSetDecoderCreator func(name string) (CharSetDecoder, error)

// mapCharSetDecoder : CharSetDecoder factory mappings
var mapCharSetDecoder = make(map[string]CharSetDecoderCreator)

// RegisterCharSetDecoder : register CharSetDecoder to factory
var RegisterCharSetDecoder = func(name string, fn CharSetDecoderCreator) {
	mapCharSetDecoder[name] = fn
}

// NewCharSetDecoder : create CharSetDecoder by name
var NewCharSetDecoder = func(name string) (CharSetDecoder, error) {
	fn, ok := mapCharSetDecoder[name]
	if !ok {
		return nil, fmt.Errorf("unknown CharSetDecoder %s", name)
	}
	return fn(name)
}

func init() {
	RegisterPlugin(&PluginInfo{
		Name: "CharSetDecoder",
		Registered: func() []string {
			keys := make([]string, 0, len(mapCharSetDecoder))
			for key := range mapCharSetDecoder {
				keys = append(keys, key)
			}
			return keys
		},
	})
}

// CharSetEncoderCreator : function to create CharSetEncoder
type CharSetEncoderCreator func(name string) (CharSetEncoder, error)

// mapCharSetEncoder : CharSetEncoder factory mappings
var mapCharSetEncoder = make(map[string]CharSetEncoderCreator)

// RegisterCharSetEncoder : register CharSetEncoder to factory
var RegisterCharSetEncoder = func(name string, fn CharSetEncoderCreator) {
	mapCharSetEncoder[name] = fn
}

// NewCharSetEncoder : create CharSetEncoder by name
var NewCharSetEncoder = func(name string) (CharSetEncoder, error) {
	fn, ok := mapCharSetEncoder[name]
	if !ok {
		return nil, fmt.Errorf("unknown CharSetEncoder %s", name)
	}
	return fn(name)
}

func init() {
	RegisterPlugin(&PluginInfo{
		Name: "CharSetEncoder",
		Registered: func() []string {
			keys := make([]string, 0, len(mapCharSetEncoder))
			for key := range mapCharSetEncoder {
				keys = append(keys, key)
			}
			return keys
		},
	})
}
