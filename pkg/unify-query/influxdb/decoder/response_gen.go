// Tencent is pleased to support the open source community by making
// 蓝鲸智云 - 监控平台 (BlueKing - Monitor) available.
// Copyright (C) 2022 THL A29 Limited, a Tencent company. All rights reserved.
// Licensed under the MIT License (the "License"); you may not use this file except in compliance with the License.
// You may obtain a copy of the License at http://opensource.org/licenses/MIT
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.

package decoder

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"errors"
	"fmt"
	"io"
	"time"

	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *Message) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "level":
			z.Level, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Level")
				return
			}
		case "text":
			z.Text, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Text")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z Message) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "level"
	err = en.Append(0x82, 0xa5, 0x6c, 0x65, 0x76, 0x65, 0x6c)
	if err != nil {
		return
	}
	err = en.WriteString(z.Level)
	if err != nil {
		err = msgp.WrapError(err, "Level")
		return
	}
	// write "text"
	err = en.Append(0xa4, 0x74, 0x65, 0x78, 0x74)
	if err != nil {
		return
	}
	err = en.WriteString(z.Text)
	if err != nil {
		err = msgp.WrapError(err, "Text")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z Message) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "level"
	o = append(o, 0x82, 0xa5, 0x6c, 0x65, 0x76, 0x65, 0x6c)
	o = msgp.AppendString(o, z.Level)
	// string "text"
	o = append(o, 0xa4, 0x74, 0x65, 0x78, 0x74)
	o = msgp.AppendString(o, z.Text)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Message) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "level":
			z.Level, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Level")
				return
			}
		case "text":
			z.Text, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Text")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z Message) Msgsize() (s int) {
	s = 1 + 6 + msgp.StringPrefixSize + len(z.Level) + 5 + msgp.StringPrefixSize + len(z.Text)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Response) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field

	start := time.Now()
	for {
		select {
		case <-z.Ctx.Done():
			return fmt.Errorf("context timeout")
		default:
			// 兼容 chunked 模式，该模式下 zb0001 的值 influxdb 返回的都是 1，所以需要用 io.EOF 来做读完的判断
			_, err = dc.ReadMapHeader()
			if err == io.EOF {
				return nil
			}
			if err != nil {
				err = msgp.WrapError(err)
				return
			}

			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
			switch msgp.UnsafeString(field) {
			case "results":
				var zb0002 uint32
				zb0002, err = dc.ReadArrayHeader()
				if err != nil {
					err = msgp.WrapError(err, "Results")
					return
				}
				result := make([]Result, zb0002)
				for za0001 := range result {
					err = result[za0001].DecodeMsg(dc)
					if err != nil {
						err = msgp.WrapError(err, "Results", za0001)
						return
					}
				}
				// 无法知道具体有多少 chunk 片，所以只能给一个可扩容的切片
				if z.Results == nil {
					z.Results = make([]Result, 0)
				}

				z.Results = append(z.Results, result...)
			case "error":
				z.Err, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Err")
					return
				}
			default:
				err = dc.Skip()
				if err != nil {
					err = msgp.WrapError(err)
					return
				}
			}

			end := time.Now()
			sub := end.Sub(start)
			if sub.Seconds() >= 30 {
				err = msgp.WrapError(errors.New(fmt.Sprintf("msgpack decoder timeout: %f seconds", sub.Seconds())))
				return
			}
			start = end
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Response) EncodeMsg(enc *msgp.Writer) (err error) {
	defer enc.Flush()

	// chunked encode 不一样
	enc.WriteMapHeader(1)
	if z.Err != "" {
		enc.WriteString("error")
		enc.WriteString(z.Err)
		return nil
	} else {
		enc.WriteString("results")
		enc.WriteArrayHeader(uint32(len(z.Results)))
		for _, result := range z.Results {
			if result.Err != "" {
				enc.WriteMapHeader(1)
				enc.WriteString("error")
				enc.WriteString(result.Err)
				continue
			}

			sz := 2
			if len(result.Messages) > 0 {
				sz++
			}
			if result.Partial {
				sz++
			}
			enc.WriteMapHeader(uint32(sz))
			enc.WriteString("statement_id")
			enc.WriteInt(result.StatementID)
			if len(result.Messages) > 0 {
				enc.WriteString("messages")
				enc.WriteArrayHeader(uint32(len(result.Messages)))
				for _, msg := range result.Messages {
					enc.WriteMapHeader(2)
					enc.WriteString("level")
					enc.WriteString(msg.Level)
					enc.WriteString("text")
					enc.WriteString(msg.Text)
				}
			}
			enc.WriteString("series")
			enc.WriteArrayHeader(uint32(len(result.Series)))
			for _, series := range result.Series {
				sz := 2
				if series.Name != "" {
					sz++
				}
				if len(series.Tags) > 0 {
					sz++
				}
				if series.Partial {
					sz++
				}
				enc.WriteMapHeader(uint32(sz))

				if series.Name != "" {
					enc.WriteString("name")
					enc.WriteString(series.Name)
				}

				if len(series.Tags) > 0 {
					enc.WriteString("tags")
					enc.WriteMapHeader(uint32(len(series.Tags)))
					for k, v := range series.Tags {
						enc.WriteString(k)
						enc.WriteString(v)
					}
				}
				enc.WriteString("columns")
				enc.WriteArrayHeader(uint32(len(series.Columns)))
				for _, col := range series.Columns {
					enc.WriteString(col)
				}
				enc.WriteString("values")
				enc.WriteArrayHeader(uint32(len(series.Values)))
				for _, values := range series.Values {
					enc.WriteArrayHeader(uint32(len(values)))
					for _, v := range values {
						enc.WriteIntf(v)
					}
				}
				if series.Partial {
					enc.WriteString("partial")
					enc.WriteBool(series.Partial)
				}
			}
			if result.Partial {
				enc.WriteString("partial")
				enc.WriteBool(true)
			}
		}
	}
	return nil
}

// MarshalMsg implements msgp.Marshaler
func (z *Response) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "results"
	o = append(o, 0x82, 0xa7, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Results)))
	for za0001 := range z.Results {
		o, err = z.Results[za0001].MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Results", za0001)
			return
		}
	}
	// string "error"
	o = append(o, 0xa5, 0x65, 0x72, 0x72, 0x6f, 0x72)
	o = msgp.AppendString(o, z.Err)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Response) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "results":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Results")
				return
			}
			if cap(z.Results) >= int(zb0002) {
				z.Results = (z.Results)[:zb0002]
			} else {
				z.Results = make([]Result, zb0002)
			}
			for za0001 := range z.Results {
				bts, err = z.Results[za0001].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Results", za0001)
					return
				}
			}
		case "error":
			z.Err, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Err")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Response) Msgsize() (s int) {
	s = 1 + 8 + msgp.ArrayHeaderSize
	for za0001 := range z.Results {
		s += z.Results[za0001].Msgsize()
	}
	s += 6 + msgp.StringPrefixSize + len(z.Err)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Result) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "statement_id":
			z.StatementID, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "StatementID")
				return
			}
		case "series":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Series")
				return
			}
			if cap(z.Series) >= int(zb0002) {
				z.Series = (z.Series)[:zb0002]
			} else {
				z.Series = make([]*Row, zb0002)
			}
			for za0001 := range z.Series {
				if dc.IsNil() {
					err = dc.ReadNil()
					if err != nil {
						err = msgp.WrapError(err, "Series", za0001)
						return
					}
					z.Series[za0001] = nil
				} else {
					if z.Series[za0001] == nil {
						z.Series[za0001] = new(Row)
					}
					err = z.Series[za0001].DecodeMsg(dc)
					if err != nil {
						err = msgp.WrapError(err, "Series", za0001)
						return
					}
				}
			}
		case "messages":
			var zb0003 uint32
			zb0003, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Messages")
				return
			}
			if cap(z.Messages) >= int(zb0003) {
				z.Messages = (z.Messages)[:zb0003]
			} else {
				z.Messages = make([]*Message, zb0003)
			}
			for za0002 := range z.Messages {
				if dc.IsNil() {
					err = dc.ReadNil()
					if err != nil {
						err = msgp.WrapError(err, "Messages", za0002)
						return
					}
					z.Messages[za0002] = nil
				} else {
					if z.Messages[za0002] == nil {
						z.Messages[za0002] = new(Message)
					}
					var zb0004 uint32
					zb0004, err = dc.ReadMapHeader()
					if err != nil {
						err = msgp.WrapError(err, "Messages", za0002)
						return
					}
					for zb0004 > 0 {
						zb0004--
						field, err = dc.ReadMapKeyPtr()
						if err != nil {
							err = msgp.WrapError(err, "Messages", za0002)
							return
						}
						switch msgp.UnsafeString(field) {
						case "level":
							z.Messages[za0002].Level, err = dc.ReadString()
							if err != nil {
								err = msgp.WrapError(err, "Messages", za0002, "Level")
								return
							}
						case "text":
							z.Messages[za0002].Text, err = dc.ReadString()
							if err != nil {
								err = msgp.WrapError(err, "Messages", za0002, "Text")
								return
							}
						default:
							err = dc.Skip()
							if err != nil {
								err = msgp.WrapError(err, "Messages", za0002)
								return
							}
						}
					}
				}
			}
		case "partial":
			z.Partial, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "Partial")
				return
			}
		case "error":
			z.Err, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Err")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Result) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 5
	// write "statement_id"
	err = en.Append(0x85, 0xac, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64)
	if err != nil {
		return
	}
	err = en.WriteInt(z.StatementID)
	if err != nil {
		err = msgp.WrapError(err, "StatementID")
		return
	}
	// write "series"
	err = en.Append(0xa6, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Series)))
	if err != nil {
		err = msgp.WrapError(err, "Series")
		return
	}
	for za0001 := range z.Series {
		if z.Series[za0001] == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = z.Series[za0001].EncodeMsg(en)
			if err != nil {
				err = msgp.WrapError(err, "Series", za0001)
				return
			}
		}
	}
	// write "messages"
	err = en.Append(0xa8, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Messages)))
	if err != nil {
		err = msgp.WrapError(err, "Messages")
		return
	}
	for za0002 := range z.Messages {
		if z.Messages[za0002] == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			// map header, size 2
			// write "level"
			err = en.Append(0x82, 0xa5, 0x6c, 0x65, 0x76, 0x65, 0x6c)
			if err != nil {
				return
			}
			err = en.WriteString(z.Messages[za0002].Level)
			if err != nil {
				err = msgp.WrapError(err, "Messages", za0002, "Level")
				return
			}
			// write "text"
			err = en.Append(0xa4, 0x74, 0x65, 0x78, 0x74)
			if err != nil {
				return
			}
			err = en.WriteString(z.Messages[za0002].Text)
			if err != nil {
				err = msgp.WrapError(err, "Messages", za0002, "Text")
				return
			}
		}
	}
	// write "partial"
	err = en.Append(0xa7, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c)
	if err != nil {
		return
	}
	err = en.WriteBool(z.Partial)
	if err != nil {
		err = msgp.WrapError(err, "Partial")
		return
	}
	// write "error"
	err = en.Append(0xa5, 0x65, 0x72, 0x72, 0x6f, 0x72)
	if err != nil {
		return
	}
	err = en.WriteString(z.Err)
	if err != nil {
		err = msgp.WrapError(err, "Err")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Result) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 5
	// string "statement_id"
	o = append(o, 0x85, 0xac, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64)
	o = msgp.AppendInt(o, z.StatementID)
	// string "series"
	o = append(o, 0xa6, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Series)))
	for za0001 := range z.Series {
		if z.Series[za0001] == nil {
			o = msgp.AppendNil(o)
		} else {
			o, err = z.Series[za0001].MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, "Series", za0001)
				return
			}
		}
	}
	// string "messages"
	o = append(o, 0xa8, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Messages)))
	for za0002 := range z.Messages {
		if z.Messages[za0002] == nil {
			o = msgp.AppendNil(o)
		} else {
			// map header, size 2
			// string "level"
			o = append(o, 0x82, 0xa5, 0x6c, 0x65, 0x76, 0x65, 0x6c)
			o = msgp.AppendString(o, z.Messages[za0002].Level)
			// string "text"
			o = append(o, 0xa4, 0x74, 0x65, 0x78, 0x74)
			o = msgp.AppendString(o, z.Messages[za0002].Text)
		}
	}
	// string "partial"
	o = append(o, 0xa7, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c)
	o = msgp.AppendBool(o, z.Partial)
	// string "error"
	o = append(o, 0xa5, 0x65, 0x72, 0x72, 0x6f, 0x72)
	o = msgp.AppendString(o, z.Err)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Result) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "statement_id":
			z.StatementID, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "StatementID")
				return
			}
		case "series":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Series")
				return
			}
			if cap(z.Series) >= int(zb0002) {
				z.Series = (z.Series)[:zb0002]
			} else {
				z.Series = make([]*Row, zb0002)
			}
			for za0001 := range z.Series {
				if msgp.IsNil(bts) {
					bts, err = msgp.ReadNilBytes(bts)
					if err != nil {
						return
					}
					z.Series[za0001] = nil
				} else {
					if z.Series[za0001] == nil {
						z.Series[za0001] = new(Row)
					}
					bts, err = z.Series[za0001].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "Series", za0001)
						return
					}
				}
			}
		case "messages":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Messages")
				return
			}
			if cap(z.Messages) >= int(zb0003) {
				z.Messages = (z.Messages)[:zb0003]
			} else {
				z.Messages = make([]*Message, zb0003)
			}
			for za0002 := range z.Messages {
				if msgp.IsNil(bts) {
					bts, err = msgp.ReadNilBytes(bts)
					if err != nil {
						return
					}
					z.Messages[za0002] = nil
				} else {
					if z.Messages[za0002] == nil {
						z.Messages[za0002] = new(Message)
					}
					var zb0004 uint32
					zb0004, bts, err = msgp.ReadMapHeaderBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Messages", za0002)
						return
					}
					for zb0004 > 0 {
						zb0004--
						field, bts, err = msgp.ReadMapKeyZC(bts)
						if err != nil {
							err = msgp.WrapError(err, "Messages", za0002)
							return
						}
						switch msgp.UnsafeString(field) {
						case "level":
							z.Messages[za0002].Level, bts, err = msgp.ReadStringBytes(bts)
							if err != nil {
								err = msgp.WrapError(err, "Messages", za0002, "Level")
								return
							}
						case "text":
							z.Messages[za0002].Text, bts, err = msgp.ReadStringBytes(bts)
							if err != nil {
								err = msgp.WrapError(err, "Messages", za0002, "Text")
								return
							}
						default:
							bts, err = msgp.Skip(bts)
							if err != nil {
								err = msgp.WrapError(err, "Messages", za0002)
								return
							}
						}
					}
				}
			}
		case "partial":
			z.Partial, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Partial")
				return
			}
		case "error":
			z.Err, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Err")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Result) Msgsize() (s int) {
	s = 1 + 13 + msgp.IntSize + 7 + msgp.ArrayHeaderSize
	for za0001 := range z.Series {
		if z.Series[za0001] == nil {
			s += msgp.NilSize
		} else {
			s += z.Series[za0001].Msgsize()
		}
	}
	s += 9 + msgp.ArrayHeaderSize
	for za0002 := range z.Messages {
		if z.Messages[za0002] == nil {
			s += msgp.NilSize
		} else {
			s += 1 + 6 + msgp.StringPrefixSize + len(z.Messages[za0002].Level) + 5 + msgp.StringPrefixSize + len(z.Messages[za0002].Text)
		}
	}
	s += 8 + msgp.BoolSize + 6 + msgp.StringPrefixSize + len(z.Err)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Row) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "name":
			z.Name, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		case "tags":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "Tags")
				return
			}
			if z.Tags == nil {
				z.Tags = make(map[string]string, zb0002)
			} else if len(z.Tags) > 0 {
				for key := range z.Tags {
					delete(z.Tags, key)
				}
			}
			for zb0002 > 0 {
				zb0002--
				var za0001 string
				var za0002 string
				za0001, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Tags")
					return
				}
				za0002, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Tags", za0001)
					return
				}
				z.Tags[za0001] = za0002
			}
		case "columns":
			var zb0003 uint32
			zb0003, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Columns")
				return
			}
			if cap(z.Columns) >= int(zb0003) {
				z.Columns = (z.Columns)[:zb0003]
			} else {
				z.Columns = make([]string, zb0003)
			}
			for za0003 := range z.Columns {
				z.Columns[za0003], err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Columns", za0003)
					return
				}
			}
		case "values":
			var zb0004 uint32
			zb0004, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Values")
				return
			}
			if cap(z.Values) >= int(zb0004) {
				z.Values = (z.Values)[:zb0004]
			} else {
				z.Values = make([][]interface{}, zb0004)
			}
			for za0004 := range z.Values {
				var zb0005 uint32
				zb0005, err = dc.ReadArrayHeader()
				if err != nil {
					err = msgp.WrapError(err, "Values", za0004)
					return
				}
				if cap(z.Values[za0004]) >= int(zb0005) {
					z.Values[za0004] = (z.Values[za0004])[:zb0005]
				} else {
					z.Values[za0004] = make([]interface{}, zb0005)
				}
				for za0005 := range z.Values[za0004] {
					z.Values[za0004][za0005], err = dc.ReadIntf()
					if err != nil {
						err = msgp.WrapError(err, "Values", za0004, za0005)
						return
					}
				}
			}
		case "partial":
			z.Partial, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "Partial")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Row) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 5
	// write "name"
	err = en.Append(0x85, 0xa4, 0x6e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Name)
	if err != nil {
		err = msgp.WrapError(err, "Name")
		return
	}
	// write "tags"
	err = en.Append(0xa4, 0x74, 0x61, 0x67, 0x73)
	if err != nil {
		return
	}
	err = en.WriteMapHeader(uint32(len(z.Tags)))
	if err != nil {
		err = msgp.WrapError(err, "Tags")
		return
	}
	for za0001, za0002 := range z.Tags {
		err = en.WriteString(za0001)
		if err != nil {
			err = msgp.WrapError(err, "Tags")
			return
		}
		err = en.WriteString(za0002)
		if err != nil {
			err = msgp.WrapError(err, "Tags", za0001)
			return
		}
	}
	// write "columns"
	err = en.Append(0xa7, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Columns)))
	if err != nil {
		err = msgp.WrapError(err, "Columns")
		return
	}
	for za0003 := range z.Columns {
		err = en.WriteString(z.Columns[za0003])
		if err != nil {
			err = msgp.WrapError(err, "Columns", za0003)
			return
		}
	}
	// write "values"
	err = en.Append(0xa6, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Values)))
	if err != nil {
		err = msgp.WrapError(err, "Values")
		return
	}
	for za0004 := range z.Values {
		err = en.WriteArrayHeader(uint32(len(z.Values[za0004])))
		if err != nil {
			err = msgp.WrapError(err, "Values", za0004)
			return
		}
		for za0005 := range z.Values[za0004] {
			err = en.WriteIntf(z.Values[za0004][za0005])
			if err != nil {
				err = msgp.WrapError(err, "Values", za0004, za0005)
				return
			}
		}
	}
	// write "partial"
	err = en.Append(0xa7, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c)
	if err != nil {
		return
	}
	err = en.WriteBool(z.Partial)
	if err != nil {
		err = msgp.WrapError(err, "Partial")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Row) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 5
	// string "name"
	o = append(o, 0x85, 0xa4, 0x6e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.Name)
	// string "tags"
	o = append(o, 0xa4, 0x74, 0x61, 0x67, 0x73)
	o = msgp.AppendMapHeader(o, uint32(len(z.Tags)))
	for za0001, za0002 := range z.Tags {
		o = msgp.AppendString(o, za0001)
		o = msgp.AppendString(o, za0002)
	}
	// string "columns"
	o = append(o, 0xa7, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Columns)))
	for za0003 := range z.Columns {
		o = msgp.AppendString(o, z.Columns[za0003])
	}
	// string "values"
	o = append(o, 0xa6, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Values)))
	for za0004 := range z.Values {
		o = msgp.AppendArrayHeader(o, uint32(len(z.Values[za0004])))
		for za0005 := range z.Values[za0004] {
			o, err = msgp.AppendIntf(o, z.Values[za0004][za0005])
			if err != nil {
				err = msgp.WrapError(err, "Values", za0004, za0005)
				return
			}
		}
	}
	// string "partial"
	o = append(o, 0xa7, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c)
	o = msgp.AppendBool(o, z.Partial)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Row) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "name":
			z.Name, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		case "tags":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Tags")
				return
			}
			if z.Tags == nil {
				z.Tags = make(map[string]string, zb0002)
			} else if len(z.Tags) > 0 {
				for key := range z.Tags {
					delete(z.Tags, key)
				}
			}
			for zb0002 > 0 {
				var za0001 string
				var za0002 string
				zb0002--
				za0001, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Tags")
					return
				}
				za0002, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Tags", za0001)
					return
				}
				z.Tags[za0001] = za0002
			}
		case "columns":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Columns")
				return
			}
			if cap(z.Columns) >= int(zb0003) {
				z.Columns = (z.Columns)[:zb0003]
			} else {
				z.Columns = make([]string, zb0003)
			}
			for za0003 := range z.Columns {
				z.Columns[za0003], bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Columns", za0003)
					return
				}
			}
		case "values":
			var zb0004 uint32
			zb0004, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Values")
				return
			}
			if cap(z.Values) >= int(zb0004) {
				z.Values = (z.Values)[:zb0004]
			} else {
				z.Values = make([][]interface{}, zb0004)
			}
			for za0004 := range z.Values {
				var zb0005 uint32
				zb0005, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Values", za0004)
					return
				}
				if cap(z.Values[za0004]) >= int(zb0005) {
					z.Values[za0004] = (z.Values[za0004])[:zb0005]
				} else {
					z.Values[za0004] = make([]interface{}, zb0005)
				}
				for za0005 := range z.Values[za0004] {
					z.Values[za0004][za0005], bts, err = msgp.ReadIntfBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Values", za0004, za0005)
						return
					}
				}
			}
		case "partial":
			z.Partial, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Partial")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Row) Msgsize() (s int) {
	s = 1 + 5 + msgp.StringPrefixSize + len(z.Name) + 5 + msgp.MapHeaderSize
	if z.Tags != nil {
		for za0001, za0002 := range z.Tags {
			_ = za0002
			s += msgp.StringPrefixSize + len(za0001) + msgp.StringPrefixSize + len(za0002)
		}
	}
	s += 8 + msgp.ArrayHeaderSize
	for za0003 := range z.Columns {
		s += msgp.StringPrefixSize + len(z.Columns[za0003])
	}
	s += 7 + msgp.ArrayHeaderSize
	for za0004 := range z.Values {
		s += msgp.ArrayHeaderSize
		for za0005 := range z.Values[za0004] {
			s += msgp.GuessSize(z.Values[za0004][za0005])
		}
	}
	s += 8 + msgp.BoolSize
	return
}
