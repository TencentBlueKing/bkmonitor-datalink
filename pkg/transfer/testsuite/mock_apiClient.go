// Tencent is pleased to support the open source community by making
// 蓝鲸智云 - 监控平台 (BlueKing - Monitor) available.
// Copyright (C) 2022 THL A29 Limited, a Tencent company. All rights reserved.
// Licensed under the MIT License (the "License"); you may not use this file except in compliance with the License.
// You may obtain a copy of the License at http://opensource.org/licenses/MIT
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.

// Code generated by MockGen. DO NOT EDIT.
// Source: esb/cc.go

// Package testsuite is a generated GoMock package.
package testsuite

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	esb "github.com/TencentBlueKing/bkmonitor-datalink/pkg/transfer/esb"
	models "github.com/TencentBlueKing/bkmonitor-datalink/pkg/transfer/models"
)

// MockApiClient is a mock of APIClient interface
type MockApiClient struct {
	ctrl     *gomock.Controller
	recorder *MockApiClientMockRecorder
}

// MockApiClientMockRecorder is the mock recorder for MockApiClient
type MockApiClientMockRecorder struct {
	mock *MockApiClient
}

// NewMockApiClient creates a new mock instance
func NewMockApiClient(ctrl *gomock.Controller) *MockApiClient {
	mock := &MockApiClient{ctrl: ctrl}
	mock.recorder = &MockApiClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockApiClient) EXPECT() *MockApiClientMockRecorder {
	return m.recorder
}

// GetSearchBusiness mocks base method
func (m *MockApiClient) GetSearchBusiness() ([]esb.CCSearchBusinessResponseInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSearchBusiness")
	ret0, _ := ret[0].([]esb.CCSearchBusinessResponseInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSearchBusiness indicates an expected call of GetSearchBusiness
func (mr *MockApiClientMockRecorder) GetSearchBusiness() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSearchBusiness", reflect.TypeOf((*MockApiClient)(nil).GetSearchBusiness))
}

// GetServiceInstance mocks base method
func (m *MockApiClient) GetServiceInstance(bkTenantID string, bizID, limit, start int, ServiceInstanceIds []int) (*esb.CCSearchServiceInstanceResponseData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceInstance", bkTenantID, bizID, limit, start, ServiceInstanceIds)
	ret0, _ := ret[0].(*esb.CCSearchServiceInstanceResponseData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceInstance indicates an expected call of GetServiceInstance
func (mr *MockApiClientMockRecorder) GetServiceInstance(bkTenantID, bizID, limit, start, ServiceInstanceIds interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceInstance", reflect.TypeOf((*MockApiClient)(nil).GetServiceInstance), bkTenantID, bizID, limit, start, ServiceInstanceIds)
}

// GetSearchBizInstTopo mocks base method
func (m *MockApiClient) GetSearchBizInstTopo(bkTenantID string, start, bizID, limit, level int) ([]esb.CCSearchBizInstTopoResponseInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSearchBizInstTopo", bkTenantID, start, bizID, limit, level)
	ret0, _ := ret[0].([]esb.CCSearchBizInstTopoResponseInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSearchBizInstTopo indicates an expected call of GetSearchBizInstTopo
func (mr *MockApiClientMockRecorder) GetSearchBizInstTopo(bkTenantID, start, bizID, limit, level interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSearchBizInstTopo", reflect.TypeOf((*MockApiClient)(nil).GetSearchBizInstTopo), bkTenantID, start, bizID, limit, level)
}

// GetHostsByRange mocks base method
func (m *MockApiClient) GetHostsByRange(bkTenantID string, bizID, limit, start int) (*esb.CCSearchHostResponseData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHostsByRange", bkTenantID, bizID, limit, start)
	ret0, _ := ret[0].(*esb.CCSearchHostResponseData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHostsByRange indicates an expected call of GetHostsByRange
func (mr *MockApiClientMockRecorder) GetHostsByRange(bkTenantID, bizID, limit, start interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHostsByRange", reflect.TypeOf((*MockApiClient)(nil).GetHostsByRange), bkTenantID, bizID, limit, start)
}

// VisitAllHost mocks base method
func (m *MockApiClient) VisitAllHost(ctx context.Context, batchSize int, ccInfo models.CCInfo, fn func(esb.CCSearchHostResponseDataV3Monitor, models.CCInfo) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VisitAllHost", ctx, batchSize, ccInfo, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// VisitAllHost indicates an expected call of VisitAllHost
func (mr *MockApiClientMockRecorder) VisitAllHost(ctx, batchSize, ccInfo, fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VisitAllHost", reflect.TypeOf((*MockApiClient)(nil).VisitAllHost), ctx, batchSize, ccInfo, fn)
}
