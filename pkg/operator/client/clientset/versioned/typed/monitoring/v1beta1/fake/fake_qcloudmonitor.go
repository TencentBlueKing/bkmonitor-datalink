// Tencent is pleased to support the open source community by making
// 蓝鲸智云 - 监控平台 (BlueKing - Monitor) available.
// Copyright (C) 2022 THL A29 Limited, a Tencent company. All rights reserved.
// Licensed under the MIT License (the "License"); you may not use this file except in compliance with the License.
// You may obtain a copy of the License at http://opensource.org/licenses/MIT
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	v1beta1 "github.com/TencentBlueKing/bkmonitor-datalink/pkg/operator/apis/monitoring/v1beta1"
	monitoringv1beta1 "github.com/TencentBlueKing/bkmonitor-datalink/pkg/operator/client/clientset/versioned/typed/monitoring/v1beta1"
	gentype "k8s.io/client-go/gentype"
)

// fakeQCloudMonitors implements QCloudMonitorInterface
type fakeQCloudMonitors struct {
	*gentype.FakeClientWithList[*v1beta1.QCloudMonitor, *v1beta1.QCloudMonitorList]
	Fake *FakeMonitoringV1beta1
}

func newFakeQCloudMonitors(fake *FakeMonitoringV1beta1, namespace string) monitoringv1beta1.QCloudMonitorInterface {
	return &fakeQCloudMonitors{
		gentype.NewFakeClientWithList[*v1beta1.QCloudMonitor, *v1beta1.QCloudMonitorList](
			fake.Fake,
			namespace,
			v1beta1.SchemeGroupVersion.WithResource("qcloudmonitors"),
			v1beta1.SchemeGroupVersion.WithKind("QCloudMonitor"),
			func() *v1beta1.QCloudMonitor { return &v1beta1.QCloudMonitor{} },
			func() *v1beta1.QCloudMonitorList { return &v1beta1.QCloudMonitorList{} },
			func(dst, src *v1beta1.QCloudMonitorList) { dst.ListMeta = src.ListMeta },
			func(list *v1beta1.QCloudMonitorList) []*v1beta1.QCloudMonitor {
				return gentype.ToPointerSlice(list.Items)
			},
			func(list *v1beta1.QCloudMonitorList, items []*v1beta1.QCloudMonitor) {
				list.Items = gentype.FromPointerSlice(items)
			},
		),
		fake,
	}
}
