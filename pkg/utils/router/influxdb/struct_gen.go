package influxdb

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *Cluster) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "HostList":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "HostList")
				return
			}
			if cap(z.HostList) >= int(zb0002) {
				z.HostList = (z.HostList)[:zb0002]
			} else {
				z.HostList = make([]string, zb0002)
			}
			for za0001 := range z.HostList {
				z.HostList[za0001], err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "HostList", za0001)
					return
				}
			}
		case "UnreadableHostList":
			var zb0003 uint32
			zb0003, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "UnreadableHostList")
				return
			}
			if cap(z.UnreadableHostList) >= int(zb0003) {
				z.UnreadableHostList = (z.UnreadableHostList)[:zb0003]
			} else {
				z.UnreadableHostList = make([]string, zb0003)
			}
			for za0002 := range z.UnreadableHostList {
				z.UnreadableHostList[za0002], err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "UnreadableHostList", za0002)
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Cluster) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "HostList"
	err = en.Append(0x82, 0xa8, 0x48, 0x6f, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.HostList)))
	if err != nil {
		err = msgp.WrapError(err, "HostList")
		return
	}
	for za0001 := range z.HostList {
		err = en.WriteString(z.HostList[za0001])
		if err != nil {
			err = msgp.WrapError(err, "HostList", za0001)
			return
		}
	}
	// write "UnreadableHostList"
	err = en.Append(0xb2, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.UnreadableHostList)))
	if err != nil {
		err = msgp.WrapError(err, "UnreadableHostList")
		return
	}
	for za0002 := range z.UnreadableHostList {
		err = en.WriteString(z.UnreadableHostList[za0002])
		if err != nil {
			err = msgp.WrapError(err, "UnreadableHostList", za0002)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Cluster) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "HostList"
	o = append(o, 0x82, 0xa8, 0x48, 0x6f, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74)
	o = msgp.AppendArrayHeader(o, uint32(len(z.HostList)))
	for za0001 := range z.HostList {
		o = msgp.AppendString(o, z.HostList[za0001])
	}
	// string "UnreadableHostList"
	o = append(o, 0xb2, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74)
	o = msgp.AppendArrayHeader(o, uint32(len(z.UnreadableHostList)))
	for za0002 := range z.UnreadableHostList {
		o = msgp.AppendString(o, z.UnreadableHostList[za0002])
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Cluster) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "HostList":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "HostList")
				return
			}
			if cap(z.HostList) >= int(zb0002) {
				z.HostList = (z.HostList)[:zb0002]
			} else {
				z.HostList = make([]string, zb0002)
			}
			for za0001 := range z.HostList {
				z.HostList[za0001], bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "HostList", za0001)
					return
				}
			}
		case "UnreadableHostList":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "UnreadableHostList")
				return
			}
			if cap(z.UnreadableHostList) >= int(zb0003) {
				z.UnreadableHostList = (z.UnreadableHostList)[:zb0003]
			} else {
				z.UnreadableHostList = make([]string, zb0003)
			}
			for za0002 := range z.UnreadableHostList {
				z.UnreadableHostList[za0002], bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "UnreadableHostList", za0002)
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Cluster) Msgsize() (s int) {
	s = 1 + 9 + msgp.ArrayHeaderSize
	for za0001 := range z.HostList {
		s += msgp.StringPrefixSize + len(z.HostList[za0001])
	}
	s += 19 + msgp.ArrayHeaderSize
	for za0002 := range z.UnreadableHostList {
		s += msgp.StringPrefixSize + len(z.UnreadableHostList[za0002])
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *ClusterInfo) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0003 uint32
	zb0003, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if (*z) == nil {
		(*z) = make(ClusterInfo, zb0003)
	} else if len((*z)) > 0 {
		for key := range *z {
			delete((*z), key)
		}
	}
	for zb0003 > 0 {
		zb0003--
		var zb0001 string
		var zb0002 *Cluster
		zb0001, err = dc.ReadString()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if dc.IsNil() {
			err = dc.ReadNil()
			if err != nil {
				err = msgp.WrapError(err, zb0001)
				return
			}
			zb0002 = nil
		} else {
			if zb0002 == nil {
				zb0002 = new(Cluster)
			}
			err = zb0002.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, zb0001)
				return
			}
		}
		(*z)[zb0001] = zb0002
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z ClusterInfo) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteMapHeader(uint32(len(z)))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0004, zb0005 := range z {
		err = en.WriteString(zb0004)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0005 == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = zb0005.EncodeMsg(en)
			if err != nil {
				err = msgp.WrapError(err, zb0004)
				return
			}
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z ClusterInfo) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendMapHeader(o, uint32(len(z)))
	for zb0004, zb0005 := range z {
		o = msgp.AppendString(o, zb0004)
		if zb0005 == nil {
			o = msgp.AppendNil(o)
		} else {
			o, err = zb0005.MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, zb0004)
				return
			}
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ClusterInfo) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0003 uint32
	zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if (*z) == nil {
		(*z) = make(ClusterInfo, zb0003)
	} else if len((*z)) > 0 {
		for key := range *z {
			delete((*z), key)
		}
	}
	for zb0003 > 0 {
		var zb0001 string
		var zb0002 *Cluster
		zb0003--
		zb0001, bts, err = msgp.ReadStringBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if msgp.IsNil(bts) {
			bts, err = msgp.ReadNilBytes(bts)
			if err != nil {
				return
			}
			zb0002 = nil
		} else {
			if zb0002 == nil {
				zb0002 = new(Cluster)
			}
			bts, err = zb0002.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, zb0001)
				return
			}
		}
		(*z)[zb0001] = zb0002
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z ClusterInfo) Msgsize() (s int) {
	s = msgp.MapHeaderSize
	if z != nil {
		for zb0004, zb0005 := range z {
			_ = zb0005
			s += msgp.StringPrefixSize + len(zb0004)
			if zb0005 == nil {
				s += msgp.NilSize
			} else {
				s += zb0005.Msgsize()
			}
		}
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *DataLabelToResultTable) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0004 uint32
	zb0004, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if (*z) == nil {
		(*z) = make(DataLabelToResultTable, zb0004)
	} else if len((*z)) > 0 {
		for key := range *z {
			delete((*z), key)
		}
	}
	for zb0004 > 0 {
		zb0004--
		var zb0001 string
		var zb0002 ResultTableList
		zb0001, err = dc.ReadString()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		var zb0005 uint32
		zb0005, err = dc.ReadArrayHeader()
		if err != nil {
			err = msgp.WrapError(err, zb0001)
			return
		}
		if cap(zb0002) >= int(zb0005) {
			zb0002 = (zb0002)[:zb0005]
		} else {
			zb0002 = make(ResultTableList, zb0005)
		}
		for zb0003 := range zb0002 {
			zb0002[zb0003], err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, zb0001, zb0003)
				return
			}
		}
		(*z)[zb0001] = zb0002
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z DataLabelToResultTable) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteMapHeader(uint32(len(z)))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0006, zb0007 := range z {
		err = en.WriteString(zb0006)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		err = en.WriteArrayHeader(uint32(len(zb0007)))
		if err != nil {
			err = msgp.WrapError(err, zb0006)
			return
		}
		for zb0008 := range zb0007 {
			err = en.WriteString(zb0007[zb0008])
			if err != nil {
				err = msgp.WrapError(err, zb0006, zb0008)
				return
			}
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z DataLabelToResultTable) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendMapHeader(o, uint32(len(z)))
	for zb0006, zb0007 := range z {
		o = msgp.AppendString(o, zb0006)
		o = msgp.AppendArrayHeader(o, uint32(len(zb0007)))
		for zb0008 := range zb0007 {
			o = msgp.AppendString(o, zb0007[zb0008])
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *DataLabelToResultTable) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0004 uint32
	zb0004, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if (*z) == nil {
		(*z) = make(DataLabelToResultTable, zb0004)
	} else if len((*z)) > 0 {
		for key := range *z {
			delete((*z), key)
		}
	}
	for zb0004 > 0 {
		var zb0001 string
		var zb0002 ResultTableList
		zb0004--
		zb0001, bts, err = msgp.ReadStringBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		var zb0005 uint32
		zb0005, bts, err = msgp.ReadArrayHeaderBytes(bts)
		if err != nil {
			err = msgp.WrapError(err, zb0001)
			return
		}
		if cap(zb0002) >= int(zb0005) {
			zb0002 = (zb0002)[:zb0005]
		} else {
			zb0002 = make(ResultTableList, zb0005)
		}
		for zb0003 := range zb0002 {
			zb0002[zb0003], bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, zb0001, zb0003)
				return
			}
		}
		(*z)[zb0001] = zb0002
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z DataLabelToResultTable) Msgsize() (s int) {
	s = msgp.MapHeaderSize
	if z != nil {
		for zb0006, zb0007 := range z {
			_ = zb0007
			s += msgp.StringPrefixSize + len(zb0006) + msgp.ArrayHeaderSize
			for zb0008 := range zb0007 {
				s += msgp.StringPrefixSize + len(zb0007[zb0008])
			}
		}
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *FieldToResultTable) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0004 uint32
	zb0004, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if (*z) == nil {
		(*z) = make(FieldToResultTable, zb0004)
	} else if len((*z)) > 0 {
		for key := range *z {
			delete((*z), key)
		}
	}
	for zb0004 > 0 {
		zb0004--
		var zb0001 string
		var zb0002 ResultTableList
		zb0001, err = dc.ReadString()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		var zb0005 uint32
		zb0005, err = dc.ReadArrayHeader()
		if err != nil {
			err = msgp.WrapError(err, zb0001)
			return
		}
		if cap(zb0002) >= int(zb0005) {
			zb0002 = (zb0002)[:zb0005]
		} else {
			zb0002 = make(ResultTableList, zb0005)
		}
		for zb0003 := range zb0002 {
			zb0002[zb0003], err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, zb0001, zb0003)
				return
			}
		}
		(*z)[zb0001] = zb0002
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z FieldToResultTable) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteMapHeader(uint32(len(z)))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0006, zb0007 := range z {
		err = en.WriteString(zb0006)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		err = en.WriteArrayHeader(uint32(len(zb0007)))
		if err != nil {
			err = msgp.WrapError(err, zb0006)
			return
		}
		for zb0008 := range zb0007 {
			err = en.WriteString(zb0007[zb0008])
			if err != nil {
				err = msgp.WrapError(err, zb0006, zb0008)
				return
			}
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z FieldToResultTable) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendMapHeader(o, uint32(len(z)))
	for zb0006, zb0007 := range z {
		o = msgp.AppendString(o, zb0006)
		o = msgp.AppendArrayHeader(o, uint32(len(zb0007)))
		for zb0008 := range zb0007 {
			o = msgp.AppendString(o, zb0007[zb0008])
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *FieldToResultTable) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0004 uint32
	zb0004, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if (*z) == nil {
		(*z) = make(FieldToResultTable, zb0004)
	} else if len((*z)) > 0 {
		for key := range *z {
			delete((*z), key)
		}
	}
	for zb0004 > 0 {
		var zb0001 string
		var zb0002 ResultTableList
		zb0004--
		zb0001, bts, err = msgp.ReadStringBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		var zb0005 uint32
		zb0005, bts, err = msgp.ReadArrayHeaderBytes(bts)
		if err != nil {
			err = msgp.WrapError(err, zb0001)
			return
		}
		if cap(zb0002) >= int(zb0005) {
			zb0002 = (zb0002)[:zb0005]
		} else {
			zb0002 = make(ResultTableList, zb0005)
		}
		for zb0003 := range zb0002 {
			zb0002[zb0003], bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, zb0001, zb0003)
				return
			}
		}
		(*z)[zb0001] = zb0002
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z FieldToResultTable) Msgsize() (s int) {
	s = msgp.MapHeaderSize
	if z != nil {
		for zb0006, zb0007 := range z {
			_ = zb0007
			s += msgp.StringPrefixSize + len(zb0006) + msgp.ArrayHeaderSize
			for zb0008 := range zb0007 {
				s += msgp.StringPrefixSize + len(zb0007[zb0008])
			}
		}
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Host) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "DomainName":
			z.DomainName, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "DomainName")
				return
			}
		case "Port":
			z.Port, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Port")
				return
			}
		case "GrpcPort":
			z.GrpcPort, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "GrpcPort")
				return
			}
		case "Username":
			z.Username, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Username")
				return
			}
		case "Password":
			z.Password, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Password")
				return
			}
		case "Protocol":
			z.Protocol, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Protocol")
				return
			}
		case "Disabled":
			z.Disabled, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "Disabled")
				return
			}
		case "BackupRateLimit":
			z.BackupRateLimit, err = dc.ReadFloat64()
			if err != nil {
				err = msgp.WrapError(err, "BackupRateLimit")
				return
			}
		case "ReadRateLimit":
			z.ReadRateLimit, err = dc.ReadFloat64()
			if err != nil {
				err = msgp.WrapError(err, "ReadRateLimit")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Host) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 9
	// write "DomainName"
	err = en.Append(0x89, 0xaa, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.DomainName)
	if err != nil {
		err = msgp.WrapError(err, "DomainName")
		return
	}
	// write "Port"
	err = en.Append(0xa4, 0x50, 0x6f, 0x72, 0x74)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Port)
	if err != nil {
		err = msgp.WrapError(err, "Port")
		return
	}
	// write "GrpcPort"
	err = en.Append(0xa8, 0x47, 0x72, 0x70, 0x63, 0x50, 0x6f, 0x72, 0x74)
	if err != nil {
		return
	}
	err = en.WriteInt(z.GrpcPort)
	if err != nil {
		err = msgp.WrapError(err, "GrpcPort")
		return
	}
	// write "Username"
	err = en.Append(0xa8, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Username)
	if err != nil {
		err = msgp.WrapError(err, "Username")
		return
	}
	// write "Password"
	err = en.Append(0xa8, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64)
	if err != nil {
		return
	}
	err = en.WriteString(z.Password)
	if err != nil {
		err = msgp.WrapError(err, "Password")
		return
	}
	// write "Protocol"
	err = en.Append(0xa8, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c)
	if err != nil {
		return
	}
	err = en.WriteString(z.Protocol)
	if err != nil {
		err = msgp.WrapError(err, "Protocol")
		return
	}
	// write "Disabled"
	err = en.Append(0xa8, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64)
	if err != nil {
		return
	}
	err = en.WriteBool(z.Disabled)
	if err != nil {
		err = msgp.WrapError(err, "Disabled")
		return
	}
	// write "BackupRateLimit"
	err = en.Append(0xaf, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74)
	if err != nil {
		return
	}
	err = en.WriteFloat64(z.BackupRateLimit)
	if err != nil {
		err = msgp.WrapError(err, "BackupRateLimit")
		return
	}
	// write "ReadRateLimit"
	err = en.Append(0xad, 0x52, 0x65, 0x61, 0x64, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74)
	if err != nil {
		return
	}
	err = en.WriteFloat64(z.ReadRateLimit)
	if err != nil {
		err = msgp.WrapError(err, "ReadRateLimit")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Host) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 9
	// string "DomainName"
	o = append(o, 0x89, 0xaa, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.DomainName)
	// string "Port"
	o = append(o, 0xa4, 0x50, 0x6f, 0x72, 0x74)
	o = msgp.AppendInt(o, z.Port)
	// string "GrpcPort"
	o = append(o, 0xa8, 0x47, 0x72, 0x70, 0x63, 0x50, 0x6f, 0x72, 0x74)
	o = msgp.AppendInt(o, z.GrpcPort)
	// string "Username"
	o = append(o, 0xa8, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.Username)
	// string "Password"
	o = append(o, 0xa8, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64)
	o = msgp.AppendString(o, z.Password)
	// string "Protocol"
	o = append(o, 0xa8, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c)
	o = msgp.AppendString(o, z.Protocol)
	// string "Disabled"
	o = append(o, 0xa8, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64)
	o = msgp.AppendBool(o, z.Disabled)
	// string "BackupRateLimit"
	o = append(o, 0xaf, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74)
	o = msgp.AppendFloat64(o, z.BackupRateLimit)
	// string "ReadRateLimit"
	o = append(o, 0xad, 0x52, 0x65, 0x61, 0x64, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74)
	o = msgp.AppendFloat64(o, z.ReadRateLimit)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Host) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "DomainName":
			z.DomainName, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "DomainName")
				return
			}
		case "Port":
			z.Port, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Port")
				return
			}
		case "GrpcPort":
			z.GrpcPort, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "GrpcPort")
				return
			}
		case "Username":
			z.Username, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Username")
				return
			}
		case "Password":
			z.Password, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Password")
				return
			}
		case "Protocol":
			z.Protocol, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Protocol")
				return
			}
		case "Disabled":
			z.Disabled, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Disabled")
				return
			}
		case "BackupRateLimit":
			z.BackupRateLimit, bts, err = msgp.ReadFloat64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "BackupRateLimit")
				return
			}
		case "ReadRateLimit":
			z.ReadRateLimit, bts, err = msgp.ReadFloat64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ReadRateLimit")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Host) Msgsize() (s int) {
	s = 1 + 11 + msgp.StringPrefixSize + len(z.DomainName) + 5 + msgp.IntSize + 9 + msgp.IntSize + 9 + msgp.StringPrefixSize + len(z.Username) + 9 + msgp.StringPrefixSize + len(z.Password) + 9 + msgp.StringPrefixSize + len(z.Protocol) + 9 + msgp.BoolSize + 16 + msgp.Float64Size + 14 + msgp.Float64Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *HostInfo) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0003 uint32
	zb0003, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if (*z) == nil {
		(*z) = make(HostInfo, zb0003)
	} else if len((*z)) > 0 {
		for key := range *z {
			delete((*z), key)
		}
	}
	for zb0003 > 0 {
		zb0003--
		var zb0001 string
		var zb0002 *Host
		zb0001, err = dc.ReadString()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if dc.IsNil() {
			err = dc.ReadNil()
			if err != nil {
				err = msgp.WrapError(err, zb0001)
				return
			}
			zb0002 = nil
		} else {
			if zb0002 == nil {
				zb0002 = new(Host)
			}
			err = zb0002.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, zb0001)
				return
			}
		}
		(*z)[zb0001] = zb0002
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z HostInfo) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteMapHeader(uint32(len(z)))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0004, zb0005 := range z {
		err = en.WriteString(zb0004)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0005 == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = zb0005.EncodeMsg(en)
			if err != nil {
				err = msgp.WrapError(err, zb0004)
				return
			}
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z HostInfo) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendMapHeader(o, uint32(len(z)))
	for zb0004, zb0005 := range z {
		o = msgp.AppendString(o, zb0004)
		if zb0005 == nil {
			o = msgp.AppendNil(o)
		} else {
			o, err = zb0005.MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, zb0004)
				return
			}
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *HostInfo) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0003 uint32
	zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if (*z) == nil {
		(*z) = make(HostInfo, zb0003)
	} else if len((*z)) > 0 {
		for key := range *z {
			delete((*z), key)
		}
	}
	for zb0003 > 0 {
		var zb0001 string
		var zb0002 *Host
		zb0003--
		zb0001, bts, err = msgp.ReadStringBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if msgp.IsNil(bts) {
			bts, err = msgp.ReadNilBytes(bts)
			if err != nil {
				return
			}
			zb0002 = nil
		} else {
			if zb0002 == nil {
				zb0002 = new(Host)
			}
			bts, err = zb0002.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, zb0001)
				return
			}
		}
		(*z)[zb0001] = zb0002
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z HostInfo) Msgsize() (s int) {
	s = msgp.MapHeaderSize
	if z != nil {
		for zb0004, zb0005 := range z {
			_ = zb0005
			s += msgp.StringPrefixSize + len(zb0004)
			if zb0005 == nil {
				s += msgp.NilSize
			} else {
				s += zb0005.Msgsize()
			}
		}
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *HostStatus) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Read":
			z.Read, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "Read")
				return
			}
		case "LastModifyTime":
			z.LastModifyTime, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "LastModifyTime")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z HostStatus) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "Read"
	err = en.Append(0x82, 0xa4, 0x52, 0x65, 0x61, 0x64)
	if err != nil {
		return
	}
	err = en.WriteBool(z.Read)
	if err != nil {
		err = msgp.WrapError(err, "Read")
		return
	}
	// write "LastModifyTime"
	err = en.Append(0xae, 0x4c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x54, 0x69, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.LastModifyTime)
	if err != nil {
		err = msgp.WrapError(err, "LastModifyTime")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z HostStatus) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "Read"
	o = append(o, 0x82, 0xa4, 0x52, 0x65, 0x61, 0x64)
	o = msgp.AppendBool(o, z.Read)
	// string "LastModifyTime"
	o = append(o, 0xae, 0x4c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x54, 0x69, 0x6d, 0x65)
	o = msgp.AppendInt64(o, z.LastModifyTime)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *HostStatus) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Read":
			z.Read, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Read")
				return
			}
		case "LastModifyTime":
			z.LastModifyTime, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "LastModifyTime")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z HostStatus) Msgsize() (s int) {
	s = 1 + 5 + msgp.BoolSize + 15 + msgp.Int64Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *HostStatusInfo) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0003 uint32
	zb0003, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if (*z) == nil {
		(*z) = make(HostStatusInfo, zb0003)
	} else if len((*z)) > 0 {
		for key := range *z {
			delete((*z), key)
		}
	}
	for zb0003 > 0 {
		zb0003--
		var zb0001 string
		var zb0002 *HostStatus
		zb0001, err = dc.ReadString()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if dc.IsNil() {
			err = dc.ReadNil()
			if err != nil {
				err = msgp.WrapError(err, zb0001)
				return
			}
			zb0002 = nil
		} else {
			if zb0002 == nil {
				zb0002 = new(HostStatus)
			}
			var field []byte
			_ = field
			var zb0004 uint32
			zb0004, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, zb0001)
				return
			}
			for zb0004 > 0 {
				zb0004--
				field, err = dc.ReadMapKeyPtr()
				if err != nil {
					err = msgp.WrapError(err, zb0001)
					return
				}
				switch msgp.UnsafeString(field) {
				case "Read":
					zb0002.Read, err = dc.ReadBool()
					if err != nil {
						err = msgp.WrapError(err, zb0001, "Read")
						return
					}
				case "LastModifyTime":
					zb0002.LastModifyTime, err = dc.ReadInt64()
					if err != nil {
						err = msgp.WrapError(err, zb0001, "LastModifyTime")
						return
					}
				default:
					err = dc.Skip()
					if err != nil {
						err = msgp.WrapError(err, zb0001)
						return
					}
				}
			}
		}
		(*z)[zb0001] = zb0002
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z HostStatusInfo) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteMapHeader(uint32(len(z)))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0005, zb0006 := range z {
		err = en.WriteString(zb0005)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0006 == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			// map header, size 2
			// write "Read"
			err = en.Append(0x82, 0xa4, 0x52, 0x65, 0x61, 0x64)
			if err != nil {
				return
			}
			err = en.WriteBool(zb0006.Read)
			if err != nil {
				err = msgp.WrapError(err, zb0005, "Read")
				return
			}
			// write "LastModifyTime"
			err = en.Append(0xae, 0x4c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x54, 0x69, 0x6d, 0x65)
			if err != nil {
				return
			}
			err = en.WriteInt64(zb0006.LastModifyTime)
			if err != nil {
				err = msgp.WrapError(err, zb0005, "LastModifyTime")
				return
			}
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z HostStatusInfo) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendMapHeader(o, uint32(len(z)))
	for zb0005, zb0006 := range z {
		o = msgp.AppendString(o, zb0005)
		if zb0006 == nil {
			o = msgp.AppendNil(o)
		} else {
			// map header, size 2
			// string "Read"
			o = append(o, 0x82, 0xa4, 0x52, 0x65, 0x61, 0x64)
			o = msgp.AppendBool(o, zb0006.Read)
			// string "LastModifyTime"
			o = append(o, 0xae, 0x4c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x54, 0x69, 0x6d, 0x65)
			o = msgp.AppendInt64(o, zb0006.LastModifyTime)
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *HostStatusInfo) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0003 uint32
	zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if (*z) == nil {
		(*z) = make(HostStatusInfo, zb0003)
	} else if len((*z)) > 0 {
		for key := range *z {
			delete((*z), key)
		}
	}
	for zb0003 > 0 {
		var zb0001 string
		var zb0002 *HostStatus
		zb0003--
		zb0001, bts, err = msgp.ReadStringBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if msgp.IsNil(bts) {
			bts, err = msgp.ReadNilBytes(bts)
			if err != nil {
				return
			}
			zb0002 = nil
		} else {
			if zb0002 == nil {
				zb0002 = new(HostStatus)
			}
			var field []byte
			_ = field
			var zb0004 uint32
			zb0004, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, zb0001)
				return
			}
			for zb0004 > 0 {
				zb0004--
				field, bts, err = msgp.ReadMapKeyZC(bts)
				if err != nil {
					err = msgp.WrapError(err, zb0001)
					return
				}
				switch msgp.UnsafeString(field) {
				case "Read":
					zb0002.Read, bts, err = msgp.ReadBoolBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, zb0001, "Read")
						return
					}
				case "LastModifyTime":
					zb0002.LastModifyTime, bts, err = msgp.ReadInt64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, zb0001, "LastModifyTime")
						return
					}
				default:
					bts, err = msgp.Skip(bts)
					if err != nil {
						err = msgp.WrapError(err, zb0001)
						return
					}
				}
			}
		}
		(*z)[zb0001] = zb0002
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z HostStatusInfo) Msgsize() (s int) {
	s = msgp.MapHeaderSize
	if z != nil {
		for zb0005, zb0006 := range z {
			_ = zb0006
			s += msgp.StringPrefixSize + len(zb0005)
			if zb0006 == nil {
				s += msgp.NilSize
			} else {
				s += 1 + 5 + msgp.BoolSize + 15 + msgp.Int64Size
			}
		}
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Proxy) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "BKBizID":
			z.BKBizID, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "BKBizID")
				return
			}
		case "DataID":
			z.DataID, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "DataID")
				return
			}
		case "MeasurementType":
			z.MeasurementType, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "MeasurementType")
				return
			}
		case "StorageID":
			z.StorageID, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "StorageID")
				return
			}
		case "ClusterName":
			z.ClusterName, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "ClusterName")
				return
			}
		case "TagsKey":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "TagsKey")
				return
			}
			if cap(z.TagsKey) >= int(zb0002) {
				z.TagsKey = (z.TagsKey)[:zb0002]
			} else {
				z.TagsKey = make([]string, zb0002)
			}
			for za0001 := range z.TagsKey {
				z.TagsKey[za0001], err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "TagsKey", za0001)
					return
				}
			}
		case "Db":
			z.Db, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Db")
				return
			}
		case "Measurement":
			z.Measurement, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Measurement")
				return
			}
		case "RetentionPolicies":
			var zb0003 uint32
			zb0003, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "RetentionPolicies")
				return
			}
			if z.RetentionPolicies == nil {
				z.RetentionPolicies = make(map[string]RetentionPolicy, zb0003)
			} else if len(z.RetentionPolicies) > 0 {
				for key := range z.RetentionPolicies {
					delete(z.RetentionPolicies, key)
				}
			}
			for zb0003 > 0 {
				zb0003--
				var za0002 string
				var za0003 RetentionPolicy
				za0002, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "RetentionPolicies")
					return
				}
				var zb0004 uint32
				zb0004, err = dc.ReadMapHeader()
				if err != nil {
					err = msgp.WrapError(err, "RetentionPolicies", za0002)
					return
				}
				for zb0004 > 0 {
					zb0004--
					field, err = dc.ReadMapKeyPtr()
					if err != nil {
						err = msgp.WrapError(err, "RetentionPolicies", za0002)
						return
					}
					switch msgp.UnsafeString(field) {
					case "IsDefault":
						za0003.IsDefault, err = dc.ReadBool()
						if err != nil {
							err = msgp.WrapError(err, "RetentionPolicies", za0002, "IsDefault")
							return
						}
					case "Resolution":
						za0003.Resolution, err = dc.ReadInt()
						if err != nil {
							err = msgp.WrapError(err, "RetentionPolicies", za0002, "Resolution")
							return
						}
					default:
						err = dc.Skip()
						if err != nil {
							err = msgp.WrapError(err, "RetentionPolicies", za0002)
							return
						}
					}
				}
				z.RetentionPolicies[za0002] = za0003
			}
		case "VmRt":
			z.VmRt, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "VmRt")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Proxy) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 10
	// write "BKBizID"
	err = en.Append(0x8a, 0xa7, 0x42, 0x4b, 0x42, 0x69, 0x7a, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteString(z.BKBizID)
	if err != nil {
		err = msgp.WrapError(err, "BKBizID")
		return
	}
	// write "DataID"
	err = en.Append(0xa6, 0x44, 0x61, 0x74, 0x61, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteString(z.DataID)
	if err != nil {
		err = msgp.WrapError(err, "DataID")
		return
	}
	// write "MeasurementType"
	err = en.Append(0xaf, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.MeasurementType)
	if err != nil {
		err = msgp.WrapError(err, "MeasurementType")
		return
	}
	// write "StorageID"
	err = en.Append(0xa9, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteString(z.StorageID)
	if err != nil {
		err = msgp.WrapError(err, "StorageID")
		return
	}
	// write "ClusterName"
	err = en.Append(0xab, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.ClusterName)
	if err != nil {
		err = msgp.WrapError(err, "ClusterName")
		return
	}
	// write "TagsKey"
	err = en.Append(0xa7, 0x54, 0x61, 0x67, 0x73, 0x4b, 0x65, 0x79)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.TagsKey)))
	if err != nil {
		err = msgp.WrapError(err, "TagsKey")
		return
	}
	for za0001 := range z.TagsKey {
		err = en.WriteString(z.TagsKey[za0001])
		if err != nil {
			err = msgp.WrapError(err, "TagsKey", za0001)
			return
		}
	}
	// write "Db"
	err = en.Append(0xa2, 0x44, 0x62)
	if err != nil {
		return
	}
	err = en.WriteString(z.Db)
	if err != nil {
		err = msgp.WrapError(err, "Db")
		return
	}
	// write "Measurement"
	err = en.Append(0xab, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74)
	if err != nil {
		return
	}
	err = en.WriteString(z.Measurement)
	if err != nil {
		err = msgp.WrapError(err, "Measurement")
		return
	}
	// write "RetentionPolicies"
	err = en.Append(0xb1, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73)
	if err != nil {
		return
	}
	err = en.WriteMapHeader(uint32(len(z.RetentionPolicies)))
	if err != nil {
		err = msgp.WrapError(err, "RetentionPolicies")
		return
	}
	for za0002, za0003 := range z.RetentionPolicies {
		err = en.WriteString(za0002)
		if err != nil {
			err = msgp.WrapError(err, "RetentionPolicies")
			return
		}
		// map header, size 2
		// write "IsDefault"
		err = en.Append(0x82, 0xa9, 0x49, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74)
		if err != nil {
			return
		}
		err = en.WriteBool(za0003.IsDefault)
		if err != nil {
			err = msgp.WrapError(err, "RetentionPolicies", za0002, "IsDefault")
			return
		}
		// write "Resolution"
		err = en.Append(0xaa, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e)
		if err != nil {
			return
		}
		err = en.WriteInt(za0003.Resolution)
		if err != nil {
			err = msgp.WrapError(err, "RetentionPolicies", za0002, "Resolution")
			return
		}
	}
	// write "VmRt"
	err = en.Append(0xa4, 0x56, 0x6d, 0x52, 0x74)
	if err != nil {
		return
	}
	err = en.WriteString(z.VmRt)
	if err != nil {
		err = msgp.WrapError(err, "VmRt")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Proxy) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 10
	// string "BKBizID"
	o = append(o, 0x8a, 0xa7, 0x42, 0x4b, 0x42, 0x69, 0x7a, 0x49, 0x44)
	o = msgp.AppendString(o, z.BKBizID)
	// string "DataID"
	o = append(o, 0xa6, 0x44, 0x61, 0x74, 0x61, 0x49, 0x44)
	o = msgp.AppendString(o, z.DataID)
	// string "MeasurementType"
	o = append(o, 0xaf, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65)
	o = msgp.AppendString(o, z.MeasurementType)
	// string "StorageID"
	o = append(o, 0xa9, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x44)
	o = msgp.AppendString(o, z.StorageID)
	// string "ClusterName"
	o = append(o, 0xab, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.ClusterName)
	// string "TagsKey"
	o = append(o, 0xa7, 0x54, 0x61, 0x67, 0x73, 0x4b, 0x65, 0x79)
	o = msgp.AppendArrayHeader(o, uint32(len(z.TagsKey)))
	for za0001 := range z.TagsKey {
		o = msgp.AppendString(o, z.TagsKey[za0001])
	}
	// string "Db"
	o = append(o, 0xa2, 0x44, 0x62)
	o = msgp.AppendString(o, z.Db)
	// string "Measurement"
	o = append(o, 0xab, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74)
	o = msgp.AppendString(o, z.Measurement)
	// string "RetentionPolicies"
	o = append(o, 0xb1, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73)
	o = msgp.AppendMapHeader(o, uint32(len(z.RetentionPolicies)))
	for za0002, za0003 := range z.RetentionPolicies {
		o = msgp.AppendString(o, za0002)
		// map header, size 2
		// string "IsDefault"
		o = append(o, 0x82, 0xa9, 0x49, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74)
		o = msgp.AppendBool(o, za0003.IsDefault)
		// string "Resolution"
		o = append(o, 0xaa, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e)
		o = msgp.AppendInt(o, za0003.Resolution)
	}
	// string "VmRt"
	o = append(o, 0xa4, 0x56, 0x6d, 0x52, 0x74)
	o = msgp.AppendString(o, z.VmRt)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Proxy) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "BKBizID":
			z.BKBizID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "BKBizID")
				return
			}
		case "DataID":
			z.DataID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "DataID")
				return
			}
		case "MeasurementType":
			z.MeasurementType, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "MeasurementType")
				return
			}
		case "StorageID":
			z.StorageID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "StorageID")
				return
			}
		case "ClusterName":
			z.ClusterName, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ClusterName")
				return
			}
		case "TagsKey":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "TagsKey")
				return
			}
			if cap(z.TagsKey) >= int(zb0002) {
				z.TagsKey = (z.TagsKey)[:zb0002]
			} else {
				z.TagsKey = make([]string, zb0002)
			}
			for za0001 := range z.TagsKey {
				z.TagsKey[za0001], bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "TagsKey", za0001)
					return
				}
			}
		case "Db":
			z.Db, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Db")
				return
			}
		case "Measurement":
			z.Measurement, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Measurement")
				return
			}
		case "RetentionPolicies":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "RetentionPolicies")
				return
			}
			if z.RetentionPolicies == nil {
				z.RetentionPolicies = make(map[string]RetentionPolicy, zb0003)
			} else if len(z.RetentionPolicies) > 0 {
				for key := range z.RetentionPolicies {
					delete(z.RetentionPolicies, key)
				}
			}
			for zb0003 > 0 {
				var za0002 string
				var za0003 RetentionPolicy
				zb0003--
				za0002, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "RetentionPolicies")
					return
				}
				var zb0004 uint32
				zb0004, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "RetentionPolicies", za0002)
					return
				}
				for zb0004 > 0 {
					zb0004--
					field, bts, err = msgp.ReadMapKeyZC(bts)
					if err != nil {
						err = msgp.WrapError(err, "RetentionPolicies", za0002)
						return
					}
					switch msgp.UnsafeString(field) {
					case "IsDefault":
						za0003.IsDefault, bts, err = msgp.ReadBoolBytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "RetentionPolicies", za0002, "IsDefault")
							return
						}
					case "Resolution":
						za0003.Resolution, bts, err = msgp.ReadIntBytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "RetentionPolicies", za0002, "Resolution")
							return
						}
					default:
						bts, err = msgp.Skip(bts)
						if err != nil {
							err = msgp.WrapError(err, "RetentionPolicies", za0002)
							return
						}
					}
				}
				z.RetentionPolicies[za0002] = za0003
			}
		case "VmRt":
			z.VmRt, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "VmRt")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Proxy) Msgsize() (s int) {
	s = 1 + 8 + msgp.StringPrefixSize + len(z.BKBizID) + 7 + msgp.StringPrefixSize + len(z.DataID) + 16 + msgp.StringPrefixSize + len(z.MeasurementType) + 10 + msgp.StringPrefixSize + len(z.StorageID) + 12 + msgp.StringPrefixSize + len(z.ClusterName) + 8 + msgp.ArrayHeaderSize
	for za0001 := range z.TagsKey {
		s += msgp.StringPrefixSize + len(z.TagsKey[za0001])
	}
	s += 3 + msgp.StringPrefixSize + len(z.Db) + 12 + msgp.StringPrefixSize + len(z.Measurement) + 18 + msgp.MapHeaderSize
	if z.RetentionPolicies != nil {
		for za0002, za0003 := range z.RetentionPolicies {
			_ = za0003
			s += msgp.StringPrefixSize + len(za0002) + 1 + 10 + msgp.BoolSize + 11 + msgp.IntSize
		}
	}
	s += 5 + msgp.StringPrefixSize + len(z.VmRt)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *ProxyInfo) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0003 uint32
	zb0003, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if (*z) == nil {
		(*z) = make(ProxyInfo, zb0003)
	} else if len((*z)) > 0 {
		for key := range *z {
			delete((*z), key)
		}
	}
	for zb0003 > 0 {
		zb0003--
		var zb0001 string
		var zb0002 *Proxy
		zb0001, err = dc.ReadString()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if dc.IsNil() {
			err = dc.ReadNil()
			if err != nil {
				err = msgp.WrapError(err, zb0001)
				return
			}
			zb0002 = nil
		} else {
			if zb0002 == nil {
				zb0002 = new(Proxy)
			}
			err = zb0002.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, zb0001)
				return
			}
		}
		(*z)[zb0001] = zb0002
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z ProxyInfo) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteMapHeader(uint32(len(z)))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0004, zb0005 := range z {
		err = en.WriteString(zb0004)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0005 == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = zb0005.EncodeMsg(en)
			if err != nil {
				err = msgp.WrapError(err, zb0004)
				return
			}
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z ProxyInfo) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendMapHeader(o, uint32(len(z)))
	for zb0004, zb0005 := range z {
		o = msgp.AppendString(o, zb0004)
		if zb0005 == nil {
			o = msgp.AppendNil(o)
		} else {
			o, err = zb0005.MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, zb0004)
				return
			}
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ProxyInfo) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0003 uint32
	zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if (*z) == nil {
		(*z) = make(ProxyInfo, zb0003)
	} else if len((*z)) > 0 {
		for key := range *z {
			delete((*z), key)
		}
	}
	for zb0003 > 0 {
		var zb0001 string
		var zb0002 *Proxy
		zb0003--
		zb0001, bts, err = msgp.ReadStringBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if msgp.IsNil(bts) {
			bts, err = msgp.ReadNilBytes(bts)
			if err != nil {
				return
			}
			zb0002 = nil
		} else {
			if zb0002 == nil {
				zb0002 = new(Proxy)
			}
			bts, err = zb0002.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, zb0001)
				return
			}
		}
		(*z)[zb0001] = zb0002
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z ProxyInfo) Msgsize() (s int) {
	s = msgp.MapHeaderSize
	if z != nil {
		for zb0004, zb0005 := range z {
			_ = zb0005
			s += msgp.StringPrefixSize + len(zb0004)
			if zb0005 == nil {
				s += msgp.NilSize
			} else {
				s += zb0005.Msgsize()
			}
		}
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *QueryRouter) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "BkBizId":
			z.BkBizId, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "BkBizId")
				return
			}
		case "DataId":
			z.DataId, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "DataId")
				return
			}
		case "MeasurementType":
			z.MeasurementType, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "MeasurementType")
				return
			}
		case "VmTableId":
			z.VmTableId, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "VmTableId")
				return
			}
		case "BcsClusterId":
			z.BcsClusterId, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "BcsClusterId")
				return
			}
		case "IsInfluxdbDisabled":
			z.IsInfluxdbDisabled, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "IsInfluxdbDisabled")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *QueryRouter) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 6
	// write "BkBizId"
	err = en.Append(0x86, 0xa7, 0x42, 0x6b, 0x42, 0x69, 0x7a, 0x49, 0x64)
	if err != nil {
		return
	}
	err = en.WriteString(z.BkBizId)
	if err != nil {
		err = msgp.WrapError(err, "BkBizId")
		return
	}
	// write "DataId"
	err = en.Append(0xa6, 0x44, 0x61, 0x74, 0x61, 0x49, 0x64)
	if err != nil {
		return
	}
	err = en.WriteString(z.DataId)
	if err != nil {
		err = msgp.WrapError(err, "DataId")
		return
	}
	// write "MeasurementType"
	err = en.Append(0xaf, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.MeasurementType)
	if err != nil {
		err = msgp.WrapError(err, "MeasurementType")
		return
	}
	// write "VmTableId"
	err = en.Append(0xa9, 0x56, 0x6d, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64)
	if err != nil {
		return
	}
	err = en.WriteString(z.VmTableId)
	if err != nil {
		err = msgp.WrapError(err, "VmTableId")
		return
	}
	// write "BcsClusterId"
	err = en.Append(0xac, 0x42, 0x63, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64)
	if err != nil {
		return
	}
	err = en.WriteString(z.BcsClusterId)
	if err != nil {
		err = msgp.WrapError(err, "BcsClusterId")
		return
	}
	// write "IsInfluxdbDisabled"
	err = en.Append(0xb2, 0x49, 0x73, 0x49, 0x6e, 0x66, 0x6c, 0x75, 0x78, 0x64, 0x62, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64)
	if err != nil {
		return
	}
	err = en.WriteBool(z.IsInfluxdbDisabled)
	if err != nil {
		err = msgp.WrapError(err, "IsInfluxdbDisabled")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *QueryRouter) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 6
	// string "BkBizId"
	o = append(o, 0x86, 0xa7, 0x42, 0x6b, 0x42, 0x69, 0x7a, 0x49, 0x64)
	o = msgp.AppendString(o, z.BkBizId)
	// string "DataId"
	o = append(o, 0xa6, 0x44, 0x61, 0x74, 0x61, 0x49, 0x64)
	o = msgp.AppendString(o, z.DataId)
	// string "MeasurementType"
	o = append(o, 0xaf, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65)
	o = msgp.AppendString(o, z.MeasurementType)
	// string "VmTableId"
	o = append(o, 0xa9, 0x56, 0x6d, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64)
	o = msgp.AppendString(o, z.VmTableId)
	// string "BcsClusterId"
	o = append(o, 0xac, 0x42, 0x63, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64)
	o = msgp.AppendString(o, z.BcsClusterId)
	// string "IsInfluxdbDisabled"
	o = append(o, 0xb2, 0x49, 0x73, 0x49, 0x6e, 0x66, 0x6c, 0x75, 0x78, 0x64, 0x62, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64)
	o = msgp.AppendBool(o, z.IsInfluxdbDisabled)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *QueryRouter) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "BkBizId":
			z.BkBizId, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "BkBizId")
				return
			}
		case "DataId":
			z.DataId, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "DataId")
				return
			}
		case "MeasurementType":
			z.MeasurementType, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "MeasurementType")
				return
			}
		case "VmTableId":
			z.VmTableId, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "VmTableId")
				return
			}
		case "BcsClusterId":
			z.BcsClusterId, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "BcsClusterId")
				return
			}
		case "IsInfluxdbDisabled":
			z.IsInfluxdbDisabled, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "IsInfluxdbDisabled")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *QueryRouter) Msgsize() (s int) {
	s = 1 + 8 + msgp.StringPrefixSize + len(z.BkBizId) + 7 + msgp.StringPrefixSize + len(z.DataId) + 16 + msgp.StringPrefixSize + len(z.MeasurementType) + 10 + msgp.StringPrefixSize + len(z.VmTableId) + 13 + msgp.StringPrefixSize + len(z.BcsClusterId) + 19 + msgp.BoolSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *QueryRouterInfo) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0003 uint32
	zb0003, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if (*z) == nil {
		(*z) = make(QueryRouterInfo, zb0003)
	} else if len((*z)) > 0 {
		for key := range *z {
			delete((*z), key)
		}
	}
	for zb0003 > 0 {
		zb0003--
		var zb0001 string
		var zb0002 *QueryRouter
		zb0001, err = dc.ReadString()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if dc.IsNil() {
			err = dc.ReadNil()
			if err != nil {
				err = msgp.WrapError(err, zb0001)
				return
			}
			zb0002 = nil
		} else {
			if zb0002 == nil {
				zb0002 = new(QueryRouter)
			}
			err = zb0002.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, zb0001)
				return
			}
		}
		(*z)[zb0001] = zb0002
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z QueryRouterInfo) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteMapHeader(uint32(len(z)))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0004, zb0005 := range z {
		err = en.WriteString(zb0004)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0005 == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = zb0005.EncodeMsg(en)
			if err != nil {
				err = msgp.WrapError(err, zb0004)
				return
			}
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z QueryRouterInfo) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendMapHeader(o, uint32(len(z)))
	for zb0004, zb0005 := range z {
		o = msgp.AppendString(o, zb0004)
		if zb0005 == nil {
			o = msgp.AppendNil(o)
		} else {
			o, err = zb0005.MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, zb0004)
				return
			}
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *QueryRouterInfo) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0003 uint32
	zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if (*z) == nil {
		(*z) = make(QueryRouterInfo, zb0003)
	} else if len((*z)) > 0 {
		for key := range *z {
			delete((*z), key)
		}
	}
	for zb0003 > 0 {
		var zb0001 string
		var zb0002 *QueryRouter
		zb0003--
		zb0001, bts, err = msgp.ReadStringBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if msgp.IsNil(bts) {
			bts, err = msgp.ReadNilBytes(bts)
			if err != nil {
				return
			}
			zb0002 = nil
		} else {
			if zb0002 == nil {
				zb0002 = new(QueryRouter)
			}
			bts, err = zb0002.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, zb0001)
				return
			}
		}
		(*z)[zb0001] = zb0002
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z QueryRouterInfo) Msgsize() (s int) {
	s = msgp.MapHeaderSize
	if z != nil {
		for zb0004, zb0005 := range z {
			_ = zb0005
			s += msgp.StringPrefixSize + len(zb0004)
			if zb0005 == nil {
				s += msgp.NilSize
			} else {
				s += zb0005.Msgsize()
			}
		}
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *ResultTableDetail) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "StorageId":
			z.StorageId, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "StorageId")
				return
			}
		case "ClusterName":
			z.ClusterName, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "ClusterName")
				return
			}
		case "DB":
			z.DB, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "DB")
				return
			}
		case "TableId":
			z.TableId, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "TableId")
				return
			}
		case "Measurement":
			z.Measurement, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Measurement")
				return
			}
		case "VmRt":
			z.VmRt, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "VmRt")
				return
			}
		case "Fields":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Fields")
				return
			}
			if cap(z.Fields) >= int(zb0002) {
				z.Fields = (z.Fields)[:zb0002]
			} else {
				z.Fields = make([]string, zb0002)
			}
			for za0001 := range z.Fields {
				z.Fields[za0001], err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Fields", za0001)
					return
				}
			}
		case "MeasurementType":
			z.MeasurementType, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "MeasurementType")
				return
			}
		case "BcsClusterID":
			z.BcsClusterID, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "BcsClusterID")
				return
			}
		case "DataLabel":
			z.DataLabel, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "DataLabel")
				return
			}
		case "TagsKey":
			var zb0003 uint32
			zb0003, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "TagsKey")
				return
			}
			if cap(z.TagsKey) >= int(zb0003) {
				z.TagsKey = (z.TagsKey)[:zb0003]
			} else {
				z.TagsKey = make([]string, zb0003)
			}
			for za0002 := range z.TagsKey {
				z.TagsKey[za0002], err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "TagsKey", za0002)
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *ResultTableDetail) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 11
	// write "StorageId"
	err = en.Append(0x8b, 0xa9, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x64)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.StorageId)
	if err != nil {
		err = msgp.WrapError(err, "StorageId")
		return
	}
	// write "ClusterName"
	err = en.Append(0xab, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.ClusterName)
	if err != nil {
		err = msgp.WrapError(err, "ClusterName")
		return
	}
	// write "DB"
	err = en.Append(0xa2, 0x44, 0x42)
	if err != nil {
		return
	}
	err = en.WriteString(z.DB)
	if err != nil {
		err = msgp.WrapError(err, "DB")
		return
	}
	// write "TableId"
	err = en.Append(0xa7, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64)
	if err != nil {
		return
	}
	err = en.WriteString(z.TableId)
	if err != nil {
		err = msgp.WrapError(err, "TableId")
		return
	}
	// write "Measurement"
	err = en.Append(0xab, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74)
	if err != nil {
		return
	}
	err = en.WriteString(z.Measurement)
	if err != nil {
		err = msgp.WrapError(err, "Measurement")
		return
	}
	// write "VmRt"
	err = en.Append(0xa4, 0x56, 0x6d, 0x52, 0x74)
	if err != nil {
		return
	}
	err = en.WriteString(z.VmRt)
	if err != nil {
		err = msgp.WrapError(err, "VmRt")
		return
	}
	// write "Fields"
	err = en.Append(0xa6, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Fields)))
	if err != nil {
		err = msgp.WrapError(err, "Fields")
		return
	}
	for za0001 := range z.Fields {
		err = en.WriteString(z.Fields[za0001])
		if err != nil {
			err = msgp.WrapError(err, "Fields", za0001)
			return
		}
	}
	// write "MeasurementType"
	err = en.Append(0xaf, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.MeasurementType)
	if err != nil {
		err = msgp.WrapError(err, "MeasurementType")
		return
	}
	// write "BcsClusterID"
	err = en.Append(0xac, 0x42, 0x63, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteString(z.BcsClusterID)
	if err != nil {
		err = msgp.WrapError(err, "BcsClusterID")
		return
	}
	// write "DataLabel"
	err = en.Append(0xa9, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x61, 0x62, 0x65, 0x6c)
	if err != nil {
		return
	}
	err = en.WriteString(z.DataLabel)
	if err != nil {
		err = msgp.WrapError(err, "DataLabel")
		return
	}
	// write "TagsKey"
	err = en.Append(0xa7, 0x54, 0x61, 0x67, 0x73, 0x4b, 0x65, 0x79)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.TagsKey)))
	if err != nil {
		err = msgp.WrapError(err, "TagsKey")
		return
	}
	for za0002 := range z.TagsKey {
		err = en.WriteString(z.TagsKey[za0002])
		if err != nil {
			err = msgp.WrapError(err, "TagsKey", za0002)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *ResultTableDetail) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 11
	// string "StorageId"
	o = append(o, 0x8b, 0xa9, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x64)
	o = msgp.AppendInt64(o, z.StorageId)
	// string "ClusterName"
	o = append(o, 0xab, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.ClusterName)
	// string "DB"
	o = append(o, 0xa2, 0x44, 0x42)
	o = msgp.AppendString(o, z.DB)
	// string "TableId"
	o = append(o, 0xa7, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64)
	o = msgp.AppendString(o, z.TableId)
	// string "Measurement"
	o = append(o, 0xab, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74)
	o = msgp.AppendString(o, z.Measurement)
	// string "VmRt"
	o = append(o, 0xa4, 0x56, 0x6d, 0x52, 0x74)
	o = msgp.AppendString(o, z.VmRt)
	// string "Fields"
	o = append(o, 0xa6, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Fields)))
	for za0001 := range z.Fields {
		o = msgp.AppendString(o, z.Fields[za0001])
	}
	// string "MeasurementType"
	o = append(o, 0xaf, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65)
	o = msgp.AppendString(o, z.MeasurementType)
	// string "BcsClusterID"
	o = append(o, 0xac, 0x42, 0x63, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44)
	o = msgp.AppendString(o, z.BcsClusterID)
	// string "DataLabel"
	o = append(o, 0xa9, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x61, 0x62, 0x65, 0x6c)
	o = msgp.AppendString(o, z.DataLabel)
	// string "TagsKey"
	o = append(o, 0xa7, 0x54, 0x61, 0x67, 0x73, 0x4b, 0x65, 0x79)
	o = msgp.AppendArrayHeader(o, uint32(len(z.TagsKey)))
	for za0002 := range z.TagsKey {
		o = msgp.AppendString(o, z.TagsKey[za0002])
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ResultTableDetail) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "StorageId":
			z.StorageId, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "StorageId")
				return
			}
		case "ClusterName":
			z.ClusterName, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ClusterName")
				return
			}
		case "DB":
			z.DB, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "DB")
				return
			}
		case "TableId":
			z.TableId, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "TableId")
				return
			}
		case "Measurement":
			z.Measurement, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Measurement")
				return
			}
		case "VmRt":
			z.VmRt, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "VmRt")
				return
			}
		case "Fields":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Fields")
				return
			}
			if cap(z.Fields) >= int(zb0002) {
				z.Fields = (z.Fields)[:zb0002]
			} else {
				z.Fields = make([]string, zb0002)
			}
			for za0001 := range z.Fields {
				z.Fields[za0001], bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Fields", za0001)
					return
				}
			}
		case "MeasurementType":
			z.MeasurementType, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "MeasurementType")
				return
			}
		case "BcsClusterID":
			z.BcsClusterID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "BcsClusterID")
				return
			}
		case "DataLabel":
			z.DataLabel, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "DataLabel")
				return
			}
		case "TagsKey":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "TagsKey")
				return
			}
			if cap(z.TagsKey) >= int(zb0003) {
				z.TagsKey = (z.TagsKey)[:zb0003]
			} else {
				z.TagsKey = make([]string, zb0003)
			}
			for za0002 := range z.TagsKey {
				z.TagsKey[za0002], bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "TagsKey", za0002)
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *ResultTableDetail) Msgsize() (s int) {
	s = 1 + 10 + msgp.Int64Size + 12 + msgp.StringPrefixSize + len(z.ClusterName) + 3 + msgp.StringPrefixSize + len(z.DB) + 8 + msgp.StringPrefixSize + len(z.TableId) + 12 + msgp.StringPrefixSize + len(z.Measurement) + 5 + msgp.StringPrefixSize + len(z.VmRt) + 7 + msgp.ArrayHeaderSize
	for za0001 := range z.Fields {
		s += msgp.StringPrefixSize + len(z.Fields[za0001])
	}
	s += 16 + msgp.StringPrefixSize + len(z.MeasurementType) + 13 + msgp.StringPrefixSize + len(z.BcsClusterID) + 10 + msgp.StringPrefixSize + len(z.DataLabel) + 8 + msgp.ArrayHeaderSize
	for za0002 := range z.TagsKey {
		s += msgp.StringPrefixSize + len(z.TagsKey[za0002])
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *ResultTableDetailInfo) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0003 uint32
	zb0003, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if (*z) == nil {
		(*z) = make(ResultTableDetailInfo, zb0003)
	} else if len((*z)) > 0 {
		for key := range *z {
			delete((*z), key)
		}
	}
	for zb0003 > 0 {
		zb0003--
		var zb0001 string
		var zb0002 *ResultTableDetail
		zb0001, err = dc.ReadString()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if dc.IsNil() {
			err = dc.ReadNil()
			if err != nil {
				err = msgp.WrapError(err, zb0001)
				return
			}
			zb0002 = nil
		} else {
			if zb0002 == nil {
				zb0002 = new(ResultTableDetail)
			}
			err = zb0002.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, zb0001)
				return
			}
		}
		(*z)[zb0001] = zb0002
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z ResultTableDetailInfo) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteMapHeader(uint32(len(z)))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0004, zb0005 := range z {
		err = en.WriteString(zb0004)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0005 == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = zb0005.EncodeMsg(en)
			if err != nil {
				err = msgp.WrapError(err, zb0004)
				return
			}
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z ResultTableDetailInfo) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendMapHeader(o, uint32(len(z)))
	for zb0004, zb0005 := range z {
		o = msgp.AppendString(o, zb0004)
		if zb0005 == nil {
			o = msgp.AppendNil(o)
		} else {
			o, err = zb0005.MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, zb0004)
				return
			}
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ResultTableDetailInfo) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0003 uint32
	zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if (*z) == nil {
		(*z) = make(ResultTableDetailInfo, zb0003)
	} else if len((*z)) > 0 {
		for key := range *z {
			delete((*z), key)
		}
	}
	for zb0003 > 0 {
		var zb0001 string
		var zb0002 *ResultTableDetail
		zb0003--
		zb0001, bts, err = msgp.ReadStringBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if msgp.IsNil(bts) {
			bts, err = msgp.ReadNilBytes(bts)
			if err != nil {
				return
			}
			zb0002 = nil
		} else {
			if zb0002 == nil {
				zb0002 = new(ResultTableDetail)
			}
			bts, err = zb0002.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, zb0001)
				return
			}
		}
		(*z)[zb0001] = zb0002
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z ResultTableDetailInfo) Msgsize() (s int) {
	s = msgp.MapHeaderSize
	if z != nil {
		for zb0004, zb0005 := range z {
			_ = zb0005
			s += msgp.StringPrefixSize + len(zb0004)
			if zb0005 == nil {
				s += msgp.NilSize
			} else {
				s += zb0005.Msgsize()
			}
		}
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *ResultTableList) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0002 uint32
	zb0002, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if cap((*z)) >= int(zb0002) {
		(*z) = (*z)[:zb0002]
	} else {
		(*z) = make(ResultTableList, zb0002)
	}
	for zb0001 := range *z {
		(*z)[zb0001], err = dc.ReadString()
		if err != nil {
			err = msgp.WrapError(err, zb0001)
			return
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z ResultTableList) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteArrayHeader(uint32(len(z)))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0003 := range z {
		err = en.WriteString(z[zb0003])
		if err != nil {
			err = msgp.WrapError(err, zb0003)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z ResultTableList) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendArrayHeader(o, uint32(len(z)))
	for zb0003 := range z {
		o = msgp.AppendString(o, z[zb0003])
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ResultTableList) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0002 uint32
	zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if cap((*z)) >= int(zb0002) {
		(*z) = (*z)[:zb0002]
	} else {
		(*z) = make(ResultTableList, zb0002)
	}
	for zb0001 := range *z {
		(*z)[zb0001], bts, err = msgp.ReadStringBytes(bts)
		if err != nil {
			err = msgp.WrapError(err, zb0001)
			return
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z ResultTableList) Msgsize() (s int) {
	s = msgp.ArrayHeaderSize
	for zb0003 := range z {
		s += msgp.StringPrefixSize + len(z[zb0003])
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *RetentionPolicy) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "IsDefault":
			z.IsDefault, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "IsDefault")
				return
			}
		case "Resolution":
			z.Resolution, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Resolution")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z RetentionPolicy) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "IsDefault"
	err = en.Append(0x82, 0xa9, 0x49, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74)
	if err != nil {
		return
	}
	err = en.WriteBool(z.IsDefault)
	if err != nil {
		err = msgp.WrapError(err, "IsDefault")
		return
	}
	// write "Resolution"
	err = en.Append(0xaa, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Resolution)
	if err != nil {
		err = msgp.WrapError(err, "Resolution")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z RetentionPolicy) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "IsDefault"
	o = append(o, 0x82, 0xa9, 0x49, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74)
	o = msgp.AppendBool(o, z.IsDefault)
	// string "Resolution"
	o = append(o, 0xaa, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e)
	o = msgp.AppendInt(o, z.Resolution)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *RetentionPolicy) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "IsDefault":
			z.IsDefault, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "IsDefault")
				return
			}
		case "Resolution":
			z.Resolution, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Resolution")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z RetentionPolicy) Msgsize() (s int) {
	s = 1 + 10 + msgp.BoolSize + 11 + msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Space) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0003 uint32
	zb0003, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if (*z) == nil {
		(*z) = make(Space, zb0003)
	} else if len((*z)) > 0 {
		for key := range *z {
			delete((*z), key)
		}
	}
	for zb0003 > 0 {
		zb0003--
		var zb0001 string
		var zb0002 *SpaceResultTable
		zb0001, err = dc.ReadString()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if dc.IsNil() {
			err = dc.ReadNil()
			if err != nil {
				err = msgp.WrapError(err, zb0001)
				return
			}
			zb0002 = nil
		} else {
			if zb0002 == nil {
				zb0002 = new(SpaceResultTable)
			}
			err = zb0002.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, zb0001)
				return
			}
		}
		(*z)[zb0001] = zb0002
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z Space) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteMapHeader(uint32(len(z)))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0004, zb0005 := range z {
		err = en.WriteString(zb0004)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0005 == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = zb0005.EncodeMsg(en)
			if err != nil {
				err = msgp.WrapError(err, zb0004)
				return
			}
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z Space) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendMapHeader(o, uint32(len(z)))
	for zb0004, zb0005 := range z {
		o = msgp.AppendString(o, zb0004)
		if zb0005 == nil {
			o = msgp.AppendNil(o)
		} else {
			o, err = zb0005.MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, zb0004)
				return
			}
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Space) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0003 uint32
	zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if (*z) == nil {
		(*z) = make(Space, zb0003)
	} else if len((*z)) > 0 {
		for key := range *z {
			delete((*z), key)
		}
	}
	for zb0003 > 0 {
		var zb0001 string
		var zb0002 *SpaceResultTable
		zb0003--
		zb0001, bts, err = msgp.ReadStringBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if msgp.IsNil(bts) {
			bts, err = msgp.ReadNilBytes(bts)
			if err != nil {
				return
			}
			zb0002 = nil
		} else {
			if zb0002 == nil {
				zb0002 = new(SpaceResultTable)
			}
			bts, err = zb0002.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, zb0001)
				return
			}
		}
		(*z)[zb0001] = zb0002
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z Space) Msgsize() (s int) {
	s = msgp.MapHeaderSize
	if z != nil {
		for zb0004, zb0005 := range z {
			_ = zb0005
			s += msgp.StringPrefixSize + len(zb0004)
			if zb0005 == nil {
				s += msgp.NilSize
			} else {
				s += zb0005.Msgsize()
			}
		}
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *SpaceInfo) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0005 uint32
	zb0005, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if (*z) == nil {
		(*z) = make(SpaceInfo, zb0005)
	} else if len((*z)) > 0 {
		for key := range *z {
			delete((*z), key)
		}
	}
	for zb0005 > 0 {
		zb0005--
		var zb0001 string
		var zb0002 Space
		zb0001, err = dc.ReadString()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		var zb0006 uint32
		zb0006, err = dc.ReadMapHeader()
		if err != nil {
			err = msgp.WrapError(err, zb0001)
			return
		}
		if zb0002 == nil {
			zb0002 = make(Space, zb0006)
		} else if len(zb0002) > 0 {
			for key := range zb0002 {
				delete(zb0002, key)
			}
		}
		for zb0006 > 0 {
			zb0006--
			var zb0003 string
			var zb0004 *SpaceResultTable
			zb0003, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, zb0001)
				return
			}
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, zb0001, zb0003)
					return
				}
				zb0004 = nil
			} else {
				if zb0004 == nil {
					zb0004 = new(SpaceResultTable)
				}
				err = zb0004.DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, zb0001, zb0003)
					return
				}
			}
			zb0002[zb0003] = zb0004
		}
		(*z)[zb0001] = zb0002
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z SpaceInfo) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteMapHeader(uint32(len(z)))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0007, zb0008 := range z {
		err = en.WriteString(zb0007)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		err = en.WriteMapHeader(uint32(len(zb0008)))
		if err != nil {
			err = msgp.WrapError(err, zb0007)
			return
		}
		for zb0009, zb0010 := range zb0008 {
			err = en.WriteString(zb0009)
			if err != nil {
				err = msgp.WrapError(err, zb0007)
				return
			}
			if zb0010 == nil {
				err = en.WriteNil()
				if err != nil {
					return
				}
			} else {
				err = zb0010.EncodeMsg(en)
				if err != nil {
					err = msgp.WrapError(err, zb0007, zb0009)
					return
				}
			}
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z SpaceInfo) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendMapHeader(o, uint32(len(z)))
	for zb0007, zb0008 := range z {
		o = msgp.AppendString(o, zb0007)
		o = msgp.AppendMapHeader(o, uint32(len(zb0008)))
		for zb0009, zb0010 := range zb0008 {
			o = msgp.AppendString(o, zb0009)
			if zb0010 == nil {
				o = msgp.AppendNil(o)
			} else {
				o, err = zb0010.MarshalMsg(o)
				if err != nil {
					err = msgp.WrapError(err, zb0007, zb0009)
					return
				}
			}
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *SpaceInfo) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0005 uint32
	zb0005, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if (*z) == nil {
		(*z) = make(SpaceInfo, zb0005)
	} else if len((*z)) > 0 {
		for key := range *z {
			delete((*z), key)
		}
	}
	for zb0005 > 0 {
		var zb0001 string
		var zb0002 Space
		zb0005--
		zb0001, bts, err = msgp.ReadStringBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		var zb0006 uint32
		zb0006, bts, err = msgp.ReadMapHeaderBytes(bts)
		if err != nil {
			err = msgp.WrapError(err, zb0001)
			return
		}
		if zb0002 == nil {
			zb0002 = make(Space, zb0006)
		} else if len(zb0002) > 0 {
			for key := range zb0002 {
				delete(zb0002, key)
			}
		}
		for zb0006 > 0 {
			var zb0003 string
			var zb0004 *SpaceResultTable
			zb0006--
			zb0003, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, zb0001)
				return
			}
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				zb0004 = nil
			} else {
				if zb0004 == nil {
					zb0004 = new(SpaceResultTable)
				}
				bts, err = zb0004.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, zb0001, zb0003)
					return
				}
			}
			zb0002[zb0003] = zb0004
		}
		(*z)[zb0001] = zb0002
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z SpaceInfo) Msgsize() (s int) {
	s = msgp.MapHeaderSize
	if z != nil {
		for zb0007, zb0008 := range z {
			_ = zb0008
			s += msgp.StringPrefixSize + len(zb0007) + msgp.MapHeaderSize
			if zb0008 != nil {
				for zb0009, zb0010 := range zb0008 {
					_ = zb0010
					s += msgp.StringPrefixSize + len(zb0009)
					if zb0010 == nil {
						s += msgp.NilSize
					} else {
						s += zb0010.Msgsize()
					}
				}
			}
		}
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *SpaceResultTable) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "TableId":
			z.TableId, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "TableId")
				return
			}
		case "Filters":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Filters")
				return
			}
			if cap(z.Filters) >= int(zb0002) {
				z.Filters = (z.Filters)[:zb0002]
			} else {
				z.Filters = make([]map[string]string, zb0002)
			}
			for za0001 := range z.Filters {
				var zb0003 uint32
				zb0003, err = dc.ReadMapHeader()
				if err != nil {
					err = msgp.WrapError(err, "Filters", za0001)
					return
				}
				if z.Filters[za0001] == nil {
					z.Filters[za0001] = make(map[string]string, zb0003)
				} else if len(z.Filters[za0001]) > 0 {
					for key := range z.Filters[za0001] {
						delete(z.Filters[za0001], key)
					}
				}
				for zb0003 > 0 {
					zb0003--
					var za0002 string
					var za0003 string
					za0002, err = dc.ReadString()
					if err != nil {
						err = msgp.WrapError(err, "Filters", za0001)
						return
					}
					za0003, err = dc.ReadString()
					if err != nil {
						err = msgp.WrapError(err, "Filters", za0001, za0002)
						return
					}
					z.Filters[za0001][za0002] = za0003
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *SpaceResultTable) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "TableId"
	err = en.Append(0x82, 0xa7, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64)
	if err != nil {
		return
	}
	err = en.WriteString(z.TableId)
	if err != nil {
		err = msgp.WrapError(err, "TableId")
		return
	}
	// write "Filters"
	err = en.Append(0xa7, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Filters)))
	if err != nil {
		err = msgp.WrapError(err, "Filters")
		return
	}
	for za0001 := range z.Filters {
		err = en.WriteMapHeader(uint32(len(z.Filters[za0001])))
		if err != nil {
			err = msgp.WrapError(err, "Filters", za0001)
			return
		}
		for za0002, za0003 := range z.Filters[za0001] {
			err = en.WriteString(za0002)
			if err != nil {
				err = msgp.WrapError(err, "Filters", za0001)
				return
			}
			err = en.WriteString(za0003)
			if err != nil {
				err = msgp.WrapError(err, "Filters", za0001, za0002)
				return
			}
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *SpaceResultTable) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "TableId"
	o = append(o, 0x82, 0xa7, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64)
	o = msgp.AppendString(o, z.TableId)
	// string "Filters"
	o = append(o, 0xa7, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Filters)))
	for za0001 := range z.Filters {
		o = msgp.AppendMapHeader(o, uint32(len(z.Filters[za0001])))
		for za0002, za0003 := range z.Filters[za0001] {
			o = msgp.AppendString(o, za0002)
			o = msgp.AppendString(o, za0003)
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *SpaceResultTable) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "TableId":
			z.TableId, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "TableId")
				return
			}
		case "Filters":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Filters")
				return
			}
			if cap(z.Filters) >= int(zb0002) {
				z.Filters = (z.Filters)[:zb0002]
			} else {
				z.Filters = make([]map[string]string, zb0002)
			}
			for za0001 := range z.Filters {
				var zb0003 uint32
				zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Filters", za0001)
					return
				}
				if z.Filters[za0001] == nil {
					z.Filters[za0001] = make(map[string]string, zb0003)
				} else if len(z.Filters[za0001]) > 0 {
					for key := range z.Filters[za0001] {
						delete(z.Filters[za0001], key)
					}
				}
				for zb0003 > 0 {
					var za0002 string
					var za0003 string
					zb0003--
					za0002, bts, err = msgp.ReadStringBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Filters", za0001)
						return
					}
					za0003, bts, err = msgp.ReadStringBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Filters", za0001, za0002)
						return
					}
					z.Filters[za0001][za0002] = za0003
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *SpaceResultTable) Msgsize() (s int) {
	s = 1 + 8 + msgp.StringPrefixSize + len(z.TableId) + 8 + msgp.ArrayHeaderSize
	for za0001 := range z.Filters {
		s += msgp.MapHeaderSize
		if z.Filters[za0001] != nil {
			for za0002, za0003 := range z.Filters[za0001] {
				_ = za0003
				s += msgp.StringPrefixSize + len(za0002) + msgp.StringPrefixSize + len(za0003)
			}
		}
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *StableSpace) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0002 uint32
	zb0002, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if cap((*z)) >= int(zb0002) {
		(*z) = (*z)[:zb0002]
	} else {
		(*z) = make(StableSpace, zb0002)
	}
	for zb0001 := range *z {
		if dc.IsNil() {
			err = dc.ReadNil()
			if err != nil {
				err = msgp.WrapError(err, zb0001)
				return
			}
			(*z)[zb0001] = nil
		} else {
			if (*z)[zb0001] == nil {
				(*z)[zb0001] = new(SpaceResultTable)
			}
			err = (*z)[zb0001].DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, zb0001)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z StableSpace) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteArrayHeader(uint32(len(z)))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0003 := range z {
		if z[zb0003] == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = z[zb0003].EncodeMsg(en)
			if err != nil {
				err = msgp.WrapError(err, zb0003)
				return
			}
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z StableSpace) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendArrayHeader(o, uint32(len(z)))
	for zb0003 := range z {
		if z[zb0003] == nil {
			o = msgp.AppendNil(o)
		} else {
			o, err = z[zb0003].MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, zb0003)
				return
			}
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *StableSpace) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0002 uint32
	zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if cap((*z)) >= int(zb0002) {
		(*z) = (*z)[:zb0002]
	} else {
		(*z) = make(StableSpace, zb0002)
	}
	for zb0001 := range *z {
		if msgp.IsNil(bts) {
			bts, err = msgp.ReadNilBytes(bts)
			if err != nil {
				return
			}
			(*z)[zb0001] = nil
		} else {
			if (*z)[zb0001] == nil {
				(*z)[zb0001] = new(SpaceResultTable)
			}
			bts, err = (*z)[zb0001].UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, zb0001)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z StableSpace) Msgsize() (s int) {
	s = msgp.ArrayHeaderSize
	for zb0003 := range z {
		if z[zb0003] == nil {
			s += msgp.NilSize
		} else {
			s += z[zb0003].Msgsize()
		}
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Tag) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "HostList":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "HostList")
				return
			}
			if cap(z.HostList) >= int(zb0002) {
				z.HostList = (z.HostList)[:zb0002]
			} else {
				z.HostList = make([]string, zb0002)
			}
			for za0001 := range z.HostList {
				z.HostList[za0001], err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "HostList", za0001)
					return
				}
			}
		case "UnreadableHost":
			var zb0003 uint32
			zb0003, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "UnreadableHost")
				return
			}
			if cap(z.UnreadableHost) >= int(zb0003) {
				z.UnreadableHost = (z.UnreadableHost)[:zb0003]
			} else {
				z.UnreadableHost = make([]string, zb0003)
			}
			for za0002 := range z.UnreadableHost {
				z.UnreadableHost[za0002], err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "UnreadableHost", za0002)
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Tag) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "HostList"
	err = en.Append(0x82, 0xa8, 0x48, 0x6f, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.HostList)))
	if err != nil {
		err = msgp.WrapError(err, "HostList")
		return
	}
	for za0001 := range z.HostList {
		err = en.WriteString(z.HostList[za0001])
		if err != nil {
			err = msgp.WrapError(err, "HostList", za0001)
			return
		}
	}
	// write "UnreadableHost"
	err = en.Append(0xae, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x6f, 0x73, 0x74)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.UnreadableHost)))
	if err != nil {
		err = msgp.WrapError(err, "UnreadableHost")
		return
	}
	for za0002 := range z.UnreadableHost {
		err = en.WriteString(z.UnreadableHost[za0002])
		if err != nil {
			err = msgp.WrapError(err, "UnreadableHost", za0002)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Tag) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "HostList"
	o = append(o, 0x82, 0xa8, 0x48, 0x6f, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74)
	o = msgp.AppendArrayHeader(o, uint32(len(z.HostList)))
	for za0001 := range z.HostList {
		o = msgp.AppendString(o, z.HostList[za0001])
	}
	// string "UnreadableHost"
	o = append(o, 0xae, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x6f, 0x73, 0x74)
	o = msgp.AppendArrayHeader(o, uint32(len(z.UnreadableHost)))
	for za0002 := range z.UnreadableHost {
		o = msgp.AppendString(o, z.UnreadableHost[za0002])
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Tag) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "HostList":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "HostList")
				return
			}
			if cap(z.HostList) >= int(zb0002) {
				z.HostList = (z.HostList)[:zb0002]
			} else {
				z.HostList = make([]string, zb0002)
			}
			for za0001 := range z.HostList {
				z.HostList[za0001], bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "HostList", za0001)
					return
				}
			}
		case "UnreadableHost":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "UnreadableHost")
				return
			}
			if cap(z.UnreadableHost) >= int(zb0003) {
				z.UnreadableHost = (z.UnreadableHost)[:zb0003]
			} else {
				z.UnreadableHost = make([]string, zb0003)
			}
			for za0002 := range z.UnreadableHost {
				z.UnreadableHost[za0002], bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "UnreadableHost", za0002)
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Tag) Msgsize() (s int) {
	s = 1 + 9 + msgp.ArrayHeaderSize
	for za0001 := range z.HostList {
		s += msgp.StringPrefixSize + len(z.HostList[za0001])
	}
	s += 15 + msgp.ArrayHeaderSize
	for za0002 := range z.UnreadableHost {
		s += msgp.StringPrefixSize + len(z.UnreadableHost[za0002])
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *TagInfo) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0003 uint32
	zb0003, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if (*z) == nil {
		(*z) = make(TagInfo, zb0003)
	} else if len((*z)) > 0 {
		for key := range *z {
			delete((*z), key)
		}
	}
	for zb0003 > 0 {
		zb0003--
		var zb0001 string
		var zb0002 *Tag
		zb0001, err = dc.ReadString()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if dc.IsNil() {
			err = dc.ReadNil()
			if err != nil {
				err = msgp.WrapError(err, zb0001)
				return
			}
			zb0002 = nil
		} else {
			if zb0002 == nil {
				zb0002 = new(Tag)
			}
			err = zb0002.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, zb0001)
				return
			}
		}
		(*z)[zb0001] = zb0002
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z TagInfo) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteMapHeader(uint32(len(z)))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0004, zb0005 := range z {
		err = en.WriteString(zb0004)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0005 == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = zb0005.EncodeMsg(en)
			if err != nil {
				err = msgp.WrapError(err, zb0004)
				return
			}
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z TagInfo) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendMapHeader(o, uint32(len(z)))
	for zb0004, zb0005 := range z {
		o = msgp.AppendString(o, zb0004)
		if zb0005 == nil {
			o = msgp.AppendNil(o)
		} else {
			o, err = zb0005.MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, zb0004)
				return
			}
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *TagInfo) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0003 uint32
	zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if (*z) == nil {
		(*z) = make(TagInfo, zb0003)
	} else if len((*z)) > 0 {
		for key := range *z {
			delete((*z), key)
		}
	}
	for zb0003 > 0 {
		var zb0001 string
		var zb0002 *Tag
		zb0003--
		zb0001, bts, err = msgp.ReadStringBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if msgp.IsNil(bts) {
			bts, err = msgp.ReadNilBytes(bts)
			if err != nil {
				return
			}
			zb0002 = nil
		} else {
			if zb0002 == nil {
				zb0002 = new(Tag)
			}
			bts, err = zb0002.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, zb0001)
				return
			}
		}
		(*z)[zb0001] = zb0002
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z TagInfo) Msgsize() (s int) {
	s = msgp.MapHeaderSize
	if z != nil {
		for zb0004, zb0005 := range z {
			_ = zb0005
			s += msgp.StringPrefixSize + len(zb0004)
			if zb0005 == nil {
				s += msgp.NilSize
			} else {
				s += zb0005.Msgsize()
			}
		}
	}
	return
}
