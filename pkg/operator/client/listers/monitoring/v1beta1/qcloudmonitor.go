// Tencent is pleased to support the open source community by making
// 蓝鲸智云 - 监控平台 (BlueKing - Monitor) available.
// Copyright (C) 2022 THL A29 Limited, a Tencent company. All rights reserved.
// Licensed under the MIT License (the "License"); you may not use this file except in compliance with the License.
// You may obtain a copy of the License at http://opensource.org/licenses/MIT
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.

// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	monitoringv1beta1 "github.com/TencentBlueKing/bkmonitor-datalink/pkg/operator/apis/monitoring/v1beta1"
	labels "k8s.io/apimachinery/pkg/labels"
	listers "k8s.io/client-go/listers"
	cache "k8s.io/client-go/tools/cache"
)

// QCloudMonitorLister helps list QCloudMonitors.
// All objects returned here must be treated as read-only.
type QCloudMonitorLister interface {
	// List lists all QCloudMonitors in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*monitoringv1beta1.QCloudMonitor, err error)
	// QCloudMonitors returns an object that can list and get QCloudMonitors.
	QCloudMonitors(namespace string) QCloudMonitorNamespaceLister
	QCloudMonitorListerExpansion
}

// qCloudMonitorLister implements the QCloudMonitorLister interface.
type qCloudMonitorLister struct {
	listers.ResourceIndexer[*monitoringv1beta1.QCloudMonitor]
}

// NewQCloudMonitorLister returns a new QCloudMonitorLister.
func NewQCloudMonitorLister(indexer cache.Indexer) QCloudMonitorLister {
	return &qCloudMonitorLister{listers.New[*monitoringv1beta1.QCloudMonitor](indexer, monitoringv1beta1.Resource("qcloudmonitor"))}
}

// QCloudMonitors returns an object that can list and get QCloudMonitors.
func (s *qCloudMonitorLister) QCloudMonitors(namespace string) QCloudMonitorNamespaceLister {
	return qCloudMonitorNamespaceLister{listers.NewNamespaced[*monitoringv1beta1.QCloudMonitor](s.ResourceIndexer, namespace)}
}

// QCloudMonitorNamespaceLister helps list and get QCloudMonitors.
// All objects returned here must be treated as read-only.
type QCloudMonitorNamespaceLister interface {
	// List lists all QCloudMonitors in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*monitoringv1beta1.QCloudMonitor, err error)
	// Get retrieves the QCloudMonitor from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*monitoringv1beta1.QCloudMonitor, error)
	QCloudMonitorNamespaceListerExpansion
}

// qCloudMonitorNamespaceLister implements the QCloudMonitorNamespaceLister
// interface.
type qCloudMonitorNamespaceLister struct {
	listers.ResourceIndexer[*monitoringv1beta1.QCloudMonitor]
}
