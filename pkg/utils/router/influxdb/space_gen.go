package influxdb

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *ResultTableDetail) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "StorageId":
			z.StorageId, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "StorageId")
				return
			}
		case "ClusterName":
			z.ClusterName, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "ClusterName")
				return
			}
		case "DB":
			z.DB, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "DB")
				return
			}
		case "TableId":
			z.TableId, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "TableId")
				return
			}
		case "Measurement":
			z.Measurement, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Measurement")
				return
			}
		case "VmRt":
			z.VmRt, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "VmRt")
				return
			}
		case "Fields":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Fields")
				return
			}
			if cap(z.Fields) >= int(zb0002) {
				z.Fields = (z.Fields)[:zb0002]
			} else {
				z.Fields = make([]string, zb0002)
			}
			for za0001 := range z.Fields {
				z.Fields[za0001], err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Fields", za0001)
					return
				}
			}
		case "MeasurementType":
			z.MeasurementType, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "MeasurementType")
				return
			}
		case "BcsClusterID":
			z.BcsClusterID, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "BcsClusterID")
				return
			}
		case "DataLabel":
			z.DataLabel, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "DataLabel")
				return
			}
		case "TagsKey":
			var zb0003 uint32
			zb0003, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "TagsKey")
				return
			}
			if cap(z.TagsKey) >= int(zb0003) {
				z.TagsKey = (z.TagsKey)[:zb0003]
			} else {
				z.TagsKey = make([]string, zb0003)
			}
			for za0002 := range z.TagsKey {
				z.TagsKey[za0002], err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "TagsKey", za0002)
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *ResultTableDetail) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 11
	// write "StorageId"
	err = en.Append(0x8b, 0xa9, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x64)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.StorageId)
	if err != nil {
		err = msgp.WrapError(err, "StorageId")
		return
	}
	// write "ClusterName"
	err = en.Append(0xab, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.ClusterName)
	if err != nil {
		err = msgp.WrapError(err, "ClusterName")
		return
	}
	// write "DB"
	err = en.Append(0xa2, 0x44, 0x42)
	if err != nil {
		return
	}
	err = en.WriteString(z.DB)
	if err != nil {
		err = msgp.WrapError(err, "DB")
		return
	}
	// write "TableId"
	err = en.Append(0xa7, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64)
	if err != nil {
		return
	}
	err = en.WriteString(z.TableId)
	if err != nil {
		err = msgp.WrapError(err, "TableId")
		return
	}
	// write "Measurement"
	err = en.Append(0xab, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74)
	if err != nil {
		return
	}
	err = en.WriteString(z.Measurement)
	if err != nil {
		err = msgp.WrapError(err, "Measurement")
		return
	}
	// write "VmRt"
	err = en.Append(0xa4, 0x56, 0x6d, 0x52, 0x74)
	if err != nil {
		return
	}
	err = en.WriteString(z.VmRt)
	if err != nil {
		err = msgp.WrapError(err, "VmRt")
		return
	}
	// write "Fields"
	err = en.Append(0xa6, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Fields)))
	if err != nil {
		err = msgp.WrapError(err, "Fields")
		return
	}
	for za0001 := range z.Fields {
		err = en.WriteString(z.Fields[za0001])
		if err != nil {
			err = msgp.WrapError(err, "Fields", za0001)
			return
		}
	}
	// write "MeasurementType"
	err = en.Append(0xaf, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.MeasurementType)
	if err != nil {
		err = msgp.WrapError(err, "MeasurementType")
		return
	}
	// write "BcsClusterID"
	err = en.Append(0xac, 0x42, 0x63, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteString(z.BcsClusterID)
	if err != nil {
		err = msgp.WrapError(err, "BcsClusterID")
		return
	}
	// write "DataLabel"
	err = en.Append(0xa9, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x61, 0x62, 0x65, 0x6c)
	if err != nil {
		return
	}
	err = en.WriteString(z.DataLabel)
	if err != nil {
		err = msgp.WrapError(err, "DataLabel")
		return
	}
	// write "TagsKey"
	err = en.Append(0xa7, 0x54, 0x61, 0x67, 0x73, 0x4b, 0x65, 0x79)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.TagsKey)))
	if err != nil {
		err = msgp.WrapError(err, "TagsKey")
		return
	}
	for za0002 := range z.TagsKey {
		err = en.WriteString(z.TagsKey[za0002])
		if err != nil {
			err = msgp.WrapError(err, "TagsKey", za0002)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *ResultTableDetail) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 11
	// string "StorageId"
	o = append(o, 0x8b, 0xa9, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x64)
	o = msgp.AppendInt64(o, z.StorageId)
	// string "ClusterName"
	o = append(o, 0xab, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.ClusterName)
	// string "DB"
	o = append(o, 0xa2, 0x44, 0x42)
	o = msgp.AppendString(o, z.DB)
	// string "TableId"
	o = append(o, 0xa7, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64)
	o = msgp.AppendString(o, z.TableId)
	// string "Measurement"
	o = append(o, 0xab, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74)
	o = msgp.AppendString(o, z.Measurement)
	// string "VmRt"
	o = append(o, 0xa4, 0x56, 0x6d, 0x52, 0x74)
	o = msgp.AppendString(o, z.VmRt)
	// string "Fields"
	o = append(o, 0xa6, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Fields)))
	for za0001 := range z.Fields {
		o = msgp.AppendString(o, z.Fields[za0001])
	}
	// string "MeasurementType"
	o = append(o, 0xaf, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65)
	o = msgp.AppendString(o, z.MeasurementType)
	// string "BcsClusterID"
	o = append(o, 0xac, 0x42, 0x63, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44)
	o = msgp.AppendString(o, z.BcsClusterID)
	// string "DataLabel"
	o = append(o, 0xa9, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x61, 0x62, 0x65, 0x6c)
	o = msgp.AppendString(o, z.DataLabel)
	// string "TagsKey"
	o = append(o, 0xa7, 0x54, 0x61, 0x67, 0x73, 0x4b, 0x65, 0x79)
	o = msgp.AppendArrayHeader(o, uint32(len(z.TagsKey)))
	for za0002 := range z.TagsKey {
		o = msgp.AppendString(o, z.TagsKey[za0002])
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ResultTableDetail) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "StorageId":
			z.StorageId, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "StorageId")
				return
			}
		case "ClusterName":
			z.ClusterName, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ClusterName")
				return
			}
		case "DB":
			z.DB, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "DB")
				return
			}
		case "TableId":
			z.TableId, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "TableId")
				return
			}
		case "Measurement":
			z.Measurement, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Measurement")
				return
			}
		case "VmRt":
			z.VmRt, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "VmRt")
				return
			}
		case "Fields":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Fields")
				return
			}
			if cap(z.Fields) >= int(zb0002) {
				z.Fields = (z.Fields)[:zb0002]
			} else {
				z.Fields = make([]string, zb0002)
			}
			for za0001 := range z.Fields {
				z.Fields[za0001], bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Fields", za0001)
					return
				}
			}
		case "MeasurementType":
			z.MeasurementType, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "MeasurementType")
				return
			}
		case "BcsClusterID":
			z.BcsClusterID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "BcsClusterID")
				return
			}
		case "DataLabel":
			z.DataLabel, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "DataLabel")
				return
			}
		case "TagsKey":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "TagsKey")
				return
			}
			if cap(z.TagsKey) >= int(zb0003) {
				z.TagsKey = (z.TagsKey)[:zb0003]
			} else {
				z.TagsKey = make([]string, zb0003)
			}
			for za0002 := range z.TagsKey {
				z.TagsKey[za0002], bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "TagsKey", za0002)
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *ResultTableDetail) Msgsize() (s int) {
	s = 1 + 10 + msgp.Int64Size + 12 + msgp.StringPrefixSize + len(z.ClusterName) + 3 + msgp.StringPrefixSize + len(z.DB) + 8 + msgp.StringPrefixSize + len(z.TableId) + 12 + msgp.StringPrefixSize + len(z.Measurement) + 5 + msgp.StringPrefixSize + len(z.VmRt) + 7 + msgp.ArrayHeaderSize
	for za0001 := range z.Fields {
		s += msgp.StringPrefixSize + len(z.Fields[za0001])
	}
	s += 16 + msgp.StringPrefixSize + len(z.MeasurementType) + 13 + msgp.StringPrefixSize + len(z.BcsClusterID) + 10 + msgp.StringPrefixSize + len(z.DataLabel) + 8 + msgp.ArrayHeaderSize
	for za0002 := range z.TagsKey {
		s += msgp.StringPrefixSize + len(z.TagsKey[za0002])
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *ResultTableList) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0002 uint32
	zb0002, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if cap((*z)) >= int(zb0002) {
		(*z) = (*z)[:zb0002]
	} else {
		(*z) = make(ResultTableList, zb0002)
	}
	for zb0001 := range *z {
		(*z)[zb0001], err = dc.ReadString()
		if err != nil {
			err = msgp.WrapError(err, zb0001)
			return
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z ResultTableList) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteArrayHeader(uint32(len(z)))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0003 := range z {
		err = en.WriteString(z[zb0003])
		if err != nil {
			err = msgp.WrapError(err, zb0003)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z ResultTableList) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendArrayHeader(o, uint32(len(z)))
	for zb0003 := range z {
		o = msgp.AppendString(o, z[zb0003])
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ResultTableList) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0002 uint32
	zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if cap((*z)) >= int(zb0002) {
		(*z) = (*z)[:zb0002]
	} else {
		(*z) = make(ResultTableList, zb0002)
	}
	for zb0001 := range *z {
		(*z)[zb0001], bts, err = msgp.ReadStringBytes(bts)
		if err != nil {
			err = msgp.WrapError(err, zb0001)
			return
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z ResultTableList) Msgsize() (s int) {
	s = msgp.ArrayHeaderSize
	for zb0003 := range z {
		s += msgp.StringPrefixSize + len(z[zb0003])
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Space) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0003 uint32
	zb0003, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if (*z) == nil {
		(*z) = make(Space, zb0003)
	} else if len((*z)) > 0 {
		for key := range *z {
			delete((*z), key)
		}
	}
	for zb0003 > 0 {
		zb0003--
		var zb0001 string
		var zb0002 *SpaceResultTable
		zb0001, err = dc.ReadString()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if dc.IsNil() {
			err = dc.ReadNil()
			if err != nil {
				err = msgp.WrapError(err, zb0001)
				return
			}
			zb0002 = nil
		} else {
			if zb0002 == nil {
				zb0002 = new(SpaceResultTable)
			}
			err = zb0002.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, zb0001)
				return
			}
		}
		(*z)[zb0001] = zb0002
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z Space) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteMapHeader(uint32(len(z)))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0004, zb0005 := range z {
		err = en.WriteString(zb0004)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0005 == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = zb0005.EncodeMsg(en)
			if err != nil {
				err = msgp.WrapError(err, zb0004)
				return
			}
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z Space) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendMapHeader(o, uint32(len(z)))
	for zb0004, zb0005 := range z {
		o = msgp.AppendString(o, zb0004)
		if zb0005 == nil {
			o = msgp.AppendNil(o)
		} else {
			o, err = zb0005.MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, zb0004)
				return
			}
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Space) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0003 uint32
	zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if (*z) == nil {
		(*z) = make(Space, zb0003)
	} else if len((*z)) > 0 {
		for key := range *z {
			delete((*z), key)
		}
	}
	for zb0003 > 0 {
		var zb0001 string
		var zb0002 *SpaceResultTable
		zb0003--
		zb0001, bts, err = msgp.ReadStringBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if msgp.IsNil(bts) {
			bts, err = msgp.ReadNilBytes(bts)
			if err != nil {
				return
			}
			zb0002 = nil
		} else {
			if zb0002 == nil {
				zb0002 = new(SpaceResultTable)
			}
			bts, err = zb0002.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, zb0001)
				return
			}
		}
		(*z)[zb0001] = zb0002
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z Space) Msgsize() (s int) {
	s = msgp.MapHeaderSize
	if z != nil {
		for zb0004, zb0005 := range z {
			_ = zb0005
			s += msgp.StringPrefixSize + len(zb0004)
			if zb0005 == nil {
				s += msgp.NilSize
			} else {
				s += zb0005.Msgsize()
			}
		}
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *SpaceResultTable) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "TableId":
			z.TableId, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "TableId")
				return
			}
		case "Filters":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Filters")
				return
			}
			if cap(z.Filters) >= int(zb0002) {
				z.Filters = (z.Filters)[:zb0002]
			} else {
				z.Filters = make([]map[string]string, zb0002)
			}
			for za0001 := range z.Filters {
				var zb0003 uint32
				zb0003, err = dc.ReadMapHeader()
				if err != nil {
					err = msgp.WrapError(err, "Filters", za0001)
					return
				}
				if z.Filters[za0001] == nil {
					z.Filters[za0001] = make(map[string]string, zb0003)
				} else if len(z.Filters[za0001]) > 0 {
					for key := range z.Filters[za0001] {
						delete(z.Filters[za0001], key)
					}
				}
				for zb0003 > 0 {
					zb0003--
					var za0002 string
					var za0003 string
					za0002, err = dc.ReadString()
					if err != nil {
						err = msgp.WrapError(err, "Filters", za0001)
						return
					}
					za0003, err = dc.ReadString()
					if err != nil {
						err = msgp.WrapError(err, "Filters", za0001, za0002)
						return
					}
					z.Filters[za0001][za0002] = za0003
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *SpaceResultTable) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "TableId"
	err = en.Append(0x82, 0xa7, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64)
	if err != nil {
		return
	}
	err = en.WriteString(z.TableId)
	if err != nil {
		err = msgp.WrapError(err, "TableId")
		return
	}
	// write "Filters"
	err = en.Append(0xa7, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Filters)))
	if err != nil {
		err = msgp.WrapError(err, "Filters")
		return
	}
	for za0001 := range z.Filters {
		err = en.WriteMapHeader(uint32(len(z.Filters[za0001])))
		if err != nil {
			err = msgp.WrapError(err, "Filters", za0001)
			return
		}
		for za0002, za0003 := range z.Filters[za0001] {
			err = en.WriteString(za0002)
			if err != nil {
				err = msgp.WrapError(err, "Filters", za0001)
				return
			}
			err = en.WriteString(za0003)
			if err != nil {
				err = msgp.WrapError(err, "Filters", za0001, za0002)
				return
			}
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *SpaceResultTable) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "TableId"
	o = append(o, 0x82, 0xa7, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64)
	o = msgp.AppendString(o, z.TableId)
	// string "Filters"
	o = append(o, 0xa7, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Filters)))
	for za0001 := range z.Filters {
		o = msgp.AppendMapHeader(o, uint32(len(z.Filters[za0001])))
		for za0002, za0003 := range z.Filters[za0001] {
			o = msgp.AppendString(o, za0002)
			o = msgp.AppendString(o, za0003)
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *SpaceResultTable) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "TableId":
			z.TableId, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "TableId")
				return
			}
		case "Filters":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Filters")
				return
			}
			if cap(z.Filters) >= int(zb0002) {
				z.Filters = (z.Filters)[:zb0002]
			} else {
				z.Filters = make([]map[string]string, zb0002)
			}
			for za0001 := range z.Filters {
				var zb0003 uint32
				zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Filters", za0001)
					return
				}
				if z.Filters[za0001] == nil {
					z.Filters[za0001] = make(map[string]string, zb0003)
				} else if len(z.Filters[za0001]) > 0 {
					for key := range z.Filters[za0001] {
						delete(z.Filters[za0001], key)
					}
				}
				for zb0003 > 0 {
					var za0002 string
					var za0003 string
					zb0003--
					za0002, bts, err = msgp.ReadStringBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Filters", za0001)
						return
					}
					za0003, bts, err = msgp.ReadStringBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Filters", za0001, za0002)
						return
					}
					z.Filters[za0001][za0002] = za0003
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *SpaceResultTable) Msgsize() (s int) {
	s = 1 + 8 + msgp.StringPrefixSize + len(z.TableId) + 8 + msgp.ArrayHeaderSize
	for za0001 := range z.Filters {
		s += msgp.MapHeaderSize
		if z.Filters[za0001] != nil {
			for za0002, za0003 := range z.Filters[za0001] {
				_ = za0003
				s += msgp.StringPrefixSize + len(za0002) + msgp.StringPrefixSize + len(za0003)
			}
		}
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *StableSpace) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0002 uint32
	zb0002, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if cap((*z)) >= int(zb0002) {
		(*z) = (*z)[:zb0002]
	} else {
		(*z) = make(StableSpace, zb0002)
	}
	for zb0001 := range *z {
		if dc.IsNil() {
			err = dc.ReadNil()
			if err != nil {
				err = msgp.WrapError(err, zb0001)
				return
			}
			(*z)[zb0001] = nil
		} else {
			if (*z)[zb0001] == nil {
				(*z)[zb0001] = new(SpaceResultTable)
			}
			err = (*z)[zb0001].DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, zb0001)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z StableSpace) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteArrayHeader(uint32(len(z)))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0003 := range z {
		if z[zb0003] == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = z[zb0003].EncodeMsg(en)
			if err != nil {
				err = msgp.WrapError(err, zb0003)
				return
			}
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z StableSpace) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendArrayHeader(o, uint32(len(z)))
	for zb0003 := range z {
		if z[zb0003] == nil {
			o = msgp.AppendNil(o)
		} else {
			o, err = z[zb0003].MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, zb0003)
				return
			}
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *StableSpace) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0002 uint32
	zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if cap((*z)) >= int(zb0002) {
		(*z) = (*z)[:zb0002]
	} else {
		(*z) = make(StableSpace, zb0002)
	}
	for zb0001 := range *z {
		if msgp.IsNil(bts) {
			bts, err = msgp.ReadNilBytes(bts)
			if err != nil {
				return
			}
			(*z)[zb0001] = nil
		} else {
			if (*z)[zb0001] == nil {
				(*z)[zb0001] = new(SpaceResultTable)
			}
			bts, err = (*z)[zb0001].UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, zb0001)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z StableSpace) Msgsize() (s int) {
	s = msgp.ArrayHeaderSize
	for zb0003 := range z {
		if z[zb0003] == nil {
			s += msgp.NilSize
		} else {
			s += z[zb0003].Msgsize()
		}
	}
	return
}
