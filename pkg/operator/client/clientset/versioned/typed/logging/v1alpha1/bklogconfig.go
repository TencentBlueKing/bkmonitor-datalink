// Tencent is pleased to support the open source community by making
// 蓝鲸智云 - 监控平台 (BlueKing - Monitor) available.
// Copyright (C) 2022 THL A29 Limited, a Tencent company. All rights reserved.
// Licensed under the MIT License (the "License"); you may not use this file except in compliance with the License.
// You may obtain a copy of the License at http://opensource.org/licenses/MIT
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.

// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	context "context"

	loggingv1alpha1 "github.com/TencentBlueKing/bkmonitor-datalink/pkg/operator/apis/logging/v1alpha1"
	scheme "github.com/TencentBlueKing/bkmonitor-datalink/pkg/operator/client/clientset/versioned/scheme"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	gentype "k8s.io/client-go/gentype"
)

// BkLogConfigsGetter has a method to return a BkLogConfigInterface.
// A group's client should implement this interface.
type BkLogConfigsGetter interface {
	BkLogConfigs(namespace string) BkLogConfigInterface
}

// BkLogConfigInterface has methods to work with BkLogConfig resources.
type BkLogConfigInterface interface {
	Create(ctx context.Context, bkLogConfig *loggingv1alpha1.BkLogConfig, opts v1.CreateOptions) (*loggingv1alpha1.BkLogConfig, error)
	Update(ctx context.Context, bkLogConfig *loggingv1alpha1.BkLogConfig, opts v1.UpdateOptions) (*loggingv1alpha1.BkLogConfig, error)
	// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
	UpdateStatus(ctx context.Context, bkLogConfig *loggingv1alpha1.BkLogConfig, opts v1.UpdateOptions) (*loggingv1alpha1.BkLogConfig, error)
	Delete(ctx context.Context, name string, opts v1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error
	Get(ctx context.Context, name string, opts v1.GetOptions) (*loggingv1alpha1.BkLogConfig, error)
	List(ctx context.Context, opts v1.ListOptions) (*loggingv1alpha1.BkLogConfigList, error)
	Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *loggingv1alpha1.BkLogConfig, err error)
	BkLogConfigExpansion
}

// bkLogConfigs implements BkLogConfigInterface
type bkLogConfigs struct {
	*gentype.ClientWithList[*loggingv1alpha1.BkLogConfig, *loggingv1alpha1.BkLogConfigList]
}

// newBkLogConfigs returns a BkLogConfigs
func newBkLogConfigs(c *BkV1alpha1Client, namespace string) *bkLogConfigs {
	return &bkLogConfigs{
		gentype.NewClientWithList[*loggingv1alpha1.BkLogConfig, *loggingv1alpha1.BkLogConfigList](
			"bklogconfigs",
			c.RESTClient(),
			scheme.ParameterCodec,
			namespace,
			func() *loggingv1alpha1.BkLogConfig { return &loggingv1alpha1.BkLogConfig{} },
			func() *loggingv1alpha1.BkLogConfigList { return &loggingv1alpha1.BkLogConfigList{} },
		),
	}
}
