// Code generated by go-queryset. DO NOT EDIT.
package storage

import (
	"errors"
	"fmt"
	"strings"

	"github.com/jinzhu/gorm"
)

// ===== BEGIN of all query sets

// ===== BEGIN of query set ClusterMetricQuerySet

// ClusterMetricQuerySet is an queryset type for ClusterMetric
type ClusterMetricQuerySet struct {
	db *gorm.DB
}

// NewClusterMetricQuerySet constructs new ClusterMetricQuerySet
func NewClusterMetricQuerySet(db *gorm.DB) ClusterMetricQuerySet {
	return ClusterMetricQuerySet{
		db: db.Model(&ClusterMetric{}),
	}
}

func (qs ClusterMetricQuerySet) w(db *gorm.DB) ClusterMetricQuerySet {
	return NewClusterMetricQuerySet(db)
}

func (qs ClusterMetricQuerySet) Select(fields ...ClusterMetricDBSchemaField) ClusterMetricQuerySet {
	names := []string{}
	for _, f := range fields {
		names = append(names, f.String())
	}

	return qs.w(qs.db.Select(strings.Join(names, ",")))
}

// Create is an autogenerated method
// nolint: dupl
func (o *ClusterMetric) Create(db *gorm.DB) error {
	return db.Create(o).Error
}

// Delete is an autogenerated method
// nolint: dupl
func (o *ClusterMetric) Delete(db *gorm.DB) error {
	return db.Delete(o).Error
}

// All is an autogenerated method
// nolint: dupl
func (qs ClusterMetricQuerySet) All(ret *[]ClusterMetric) error {
	return qs.db.Find(ret).Error
}

// Count is an autogenerated method
// nolint: dupl
func (qs ClusterMetricQuerySet) Count() (int, error) {
	var count int
	err := qs.db.Count(&count).Error
	return count, err
}

// Delete is an autogenerated method
// nolint: dupl
func (qs ClusterMetricQuerySet) Delete() error {
	return qs.db.Delete(ClusterMetric{}).Error
}

// DeleteNum is an autogenerated method
// nolint: dupl
func (qs ClusterMetricQuerySet) DeleteNum() (int64, error) {
	db := qs.db.Delete(ClusterMetric{})
	return db.RowsAffected, db.Error
}

// DeleteNumUnscoped is an autogenerated method
// nolint: dupl
func (qs ClusterMetricQuerySet) DeleteNumUnscoped() (int64, error) {
	db := qs.db.Unscoped().Delete(ClusterMetric{})
	return db.RowsAffected, db.Error
}

// GetDB is an autogenerated method
// nolint: dupl
func (qs ClusterMetricQuerySet) GetDB() *gorm.DB {
	return qs.db
}

// GetUpdater is an autogenerated method
// nolint: dupl
func (qs ClusterMetricQuerySet) GetUpdater() ClusterMetricUpdater {
	return NewClusterMetricUpdater(qs.db)
}

// Limit is an autogenerated method
// nolint: dupl
func (qs ClusterMetricQuerySet) Limit(limit int) ClusterMetricQuerySet {
	return qs.w(qs.db.Limit(limit))
}

// MetricNameEq is an autogenerated method
// nolint: dupl
func (qs ClusterMetricQuerySet) MetricNameEq(metricName string) ClusterMetricQuerySet {
	return qs.w(qs.db.Where("metric_name = ?", metricName))
}

// MetricNameGt is an autogenerated method
// nolint: dupl
func (qs ClusterMetricQuerySet) MetricNameGt(metricName string) ClusterMetricQuerySet {
	return qs.w(qs.db.Where("metric_name > ?", metricName))
}

// MetricNameGte is an autogenerated method
// nolint: dupl
func (qs ClusterMetricQuerySet) MetricNameGte(metricName string) ClusterMetricQuerySet {
	return qs.w(qs.db.Where("metric_name >= ?", metricName))
}

// MetricNameIn is an autogenerated method
// nolint: dupl
func (qs ClusterMetricQuerySet) MetricNameIn(metricName ...string) ClusterMetricQuerySet {
	if len(metricName) == 0 {
		qs.db.AddError(errors.New("must at least pass one metricName in MetricNameIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("metric_name IN (?)", metricName))
}

// MetricNameLike is an autogenerated method
// nolint: dupl
func (qs ClusterMetricQuerySet) MetricNameLike(metricName string) ClusterMetricQuerySet {
	return qs.w(qs.db.Where("metric_name LIKE ?", metricName))
}

// MetricNameLt is an autogenerated method
// nolint: dupl
func (qs ClusterMetricQuerySet) MetricNameLt(metricName string) ClusterMetricQuerySet {
	return qs.w(qs.db.Where("metric_name < ?", metricName))
}

// MetricNameLte is an autogenerated method
// nolint: dupl
func (qs ClusterMetricQuerySet) MetricNameLte(metricName string) ClusterMetricQuerySet {
	return qs.w(qs.db.Where("metric_name <= ?", metricName))
}

// MetricNameNe is an autogenerated method
// nolint: dupl
func (qs ClusterMetricQuerySet) MetricNameNe(metricName string) ClusterMetricQuerySet {
	return qs.w(qs.db.Where("metric_name != ?", metricName))
}

// MetricNameNotIn is an autogenerated method
// nolint: dupl
func (qs ClusterMetricQuerySet) MetricNameNotIn(metricName ...string) ClusterMetricQuerySet {
	if len(metricName) == 0 {
		qs.db.AddError(errors.New("must at least pass one metricName in MetricNameNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("metric_name NOT IN (?)", metricName))
}

// MetricNameNotlike is an autogenerated method
// nolint: dupl
func (qs ClusterMetricQuerySet) MetricNameNotlike(metricName string) ClusterMetricQuerySet {
	return qs.w(qs.db.Where("metric_name NOT LIKE ?", metricName))
}

// Offset is an autogenerated method
// nolint: dupl
func (qs ClusterMetricQuerySet) Offset(offset int) ClusterMetricQuerySet {
	return qs.w(qs.db.Offset(offset))
}

// One is used to retrieve one result. It returns gorm.ErrRecordNotFound
// if nothing was fetched
func (qs ClusterMetricQuerySet) One(ret *ClusterMetric) error {
	return qs.db.First(ret).Error
}

// OrderAscByMetricName is an autogenerated method
// nolint: dupl
func (qs ClusterMetricQuerySet) OrderAscByMetricName() ClusterMetricQuerySet {
	return qs.w(qs.db.Order("metric_name ASC"))
}

// OrderAscByTags is an autogenerated method
// nolint: dupl
func (qs ClusterMetricQuerySet) OrderAscByTags() ClusterMetricQuerySet {
	return qs.w(qs.db.Order("tags ASC"))
}

// OrderDescByMetricName is an autogenerated method
// nolint: dupl
func (qs ClusterMetricQuerySet) OrderDescByMetricName() ClusterMetricQuerySet {
	return qs.w(qs.db.Order("metric_name DESC"))
}

// OrderDescByTags is an autogenerated method
// nolint: dupl
func (qs ClusterMetricQuerySet) OrderDescByTags() ClusterMetricQuerySet {
	return qs.w(qs.db.Order("tags DESC"))
}

// TagsEq is an autogenerated method
// nolint: dupl
func (qs ClusterMetricQuerySet) TagsEq(tags string) ClusterMetricQuerySet {
	return qs.w(qs.db.Where("tags = ?", tags))
}

// TagsGt is an autogenerated method
// nolint: dupl
func (qs ClusterMetricQuerySet) TagsGt(tags string) ClusterMetricQuerySet {
	return qs.w(qs.db.Where("tags > ?", tags))
}

// TagsGte is an autogenerated method
// nolint: dupl
func (qs ClusterMetricQuerySet) TagsGte(tags string) ClusterMetricQuerySet {
	return qs.w(qs.db.Where("tags >= ?", tags))
}

// TagsIn is an autogenerated method
// nolint: dupl
func (qs ClusterMetricQuerySet) TagsIn(tags ...string) ClusterMetricQuerySet {
	if len(tags) == 0 {
		qs.db.AddError(errors.New("must at least pass one tags in TagsIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("tags IN (?)", tags))
}

// TagsLike is an autogenerated method
// nolint: dupl
func (qs ClusterMetricQuerySet) TagsLike(tags string) ClusterMetricQuerySet {
	return qs.w(qs.db.Where("tags LIKE ?", tags))
}

// TagsLt is an autogenerated method
// nolint: dupl
func (qs ClusterMetricQuerySet) TagsLt(tags string) ClusterMetricQuerySet {
	return qs.w(qs.db.Where("tags < ?", tags))
}

// TagsLte is an autogenerated method
// nolint: dupl
func (qs ClusterMetricQuerySet) TagsLte(tags string) ClusterMetricQuerySet {
	return qs.w(qs.db.Where("tags <= ?", tags))
}

// TagsNe is an autogenerated method
// nolint: dupl
func (qs ClusterMetricQuerySet) TagsNe(tags string) ClusterMetricQuerySet {
	return qs.w(qs.db.Where("tags != ?", tags))
}

// TagsNotIn is an autogenerated method
// nolint: dupl
func (qs ClusterMetricQuerySet) TagsNotIn(tags ...string) ClusterMetricQuerySet {
	if len(tags) == 0 {
		qs.db.AddError(errors.New("must at least pass one tags in TagsNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("tags NOT IN (?)", tags))
}

// TagsNotlike is an autogenerated method
// nolint: dupl
func (qs ClusterMetricQuerySet) TagsNotlike(tags string) ClusterMetricQuerySet {
	return qs.w(qs.db.Where("tags NOT LIKE ?", tags))
}

// SetMetricName is an autogenerated method
// nolint: dupl
func (u ClusterMetricUpdater) SetMetricName(metricName string) ClusterMetricUpdater {
	u.fields[string(ClusterMetricDBSchema.MetricName)] = metricName
	return u
}

// SetTags is an autogenerated method
// nolint: dupl
func (u ClusterMetricUpdater) SetTags(tags string) ClusterMetricUpdater {
	u.fields[string(ClusterMetricDBSchema.Tags)] = tags
	return u
}

// Update is an autogenerated method
// nolint: dupl
func (u ClusterMetricUpdater) Update() error {
	return u.db.Updates(u.fields).Error
}

// UpdateNum is an autogenerated method
// nolint: dupl
func (u ClusterMetricUpdater) UpdateNum() (int64, error) {
	db := u.db.Updates(u.fields)
	return db.RowsAffected, db.Error
}

// ===== END of query set ClusterMetricQuerySet

// ===== BEGIN of ClusterMetric modifiers

// ClusterMetricDBSchemaField describes database schema field. It requires for method 'Update'
type ClusterMetricDBSchemaField string

// String method returns string representation of field.
// nolint: dupl
func (f ClusterMetricDBSchemaField) String() string {
	return string(f)
}

// ClusterMetricDBSchema stores db field names of ClusterMetric
var ClusterMetricDBSchema = struct {
	MetricName ClusterMetricDBSchemaField
	Tags       ClusterMetricDBSchemaField
}{

	MetricName: ClusterMetricDBSchemaField("metric_name"),
	Tags:       ClusterMetricDBSchemaField("tags"),
}

// Update updates ClusterMetric fields by primary key
// nolint: dupl
func (o *ClusterMetric) Update(db *gorm.DB, fields ...ClusterMetricDBSchemaField) error {
	dbNameToFieldName := map[string]interface{}{
		"metric_name": o.MetricName,
		"tags":        o.Tags,
	}
	u := map[string]interface{}{}
	for _, f := range fields {
		fs := f.String()
		u[fs] = dbNameToFieldName[fs]
	}
	if err := db.Model(o).Updates(u).Error; err != nil {
		if err == gorm.ErrRecordNotFound {
			return err
		}

		return fmt.Errorf("can't update ClusterMetric %v fields %v: %s",
			o, fields, err)
	}

	return nil
}

// ClusterMetricUpdater is an ClusterMetric updates manager
type ClusterMetricUpdater struct {
	fields map[string]interface{}
	db     *gorm.DB
}

// NewClusterMetricUpdater creates new ClusterMetric updater
// nolint: dupl
func NewClusterMetricUpdater(db *gorm.DB) ClusterMetricUpdater {
	return ClusterMetricUpdater{
		fields: map[string]interface{}{},
		db:     db.Model(&ClusterMetric{}),
	}
}

// ===== END of ClusterMetric modifiers

// ===== END of all query sets
