// Code generated by go-queryset. DO NOT EDIT.
package bcs

import (
	"errors"
	"fmt"
	"strings"

	"github.com/jinzhu/gorm"
)

// ===== BEGIN of all query sets

// ===== BEGIN of query set BCSLabelQuerySet

// BCSLabelQuerySet is an queryset type for BCSLabel
type BCSLabelQuerySet struct {
	db *gorm.DB
}

// NewBCSLabelQuerySet constructs new BCSLabelQuerySet
func NewBCSLabelQuerySet(db *gorm.DB) BCSLabelQuerySet {
	return BCSLabelQuerySet{
		db: db.Model(&BCSLabel{}),
	}
}

func (qs BCSLabelQuerySet) w(db *gorm.DB) BCSLabelQuerySet {
	return NewBCSLabelQuerySet(db)
}

func (qs BCSLabelQuerySet) Select(fields ...BCSLabelDBSchemaField) BCSLabelQuerySet {
	names := []string{}
	for _, f := range fields {
		names = append(names, f.String())
	}

	return qs.w(qs.db.Select(strings.Join(names, ",")))
}

// Create is an autogenerated method
// nolint: dupl
func (o *BCSLabel) Create(db *gorm.DB) error {
	return db.Create(o).Error
}

// Delete is an autogenerated method
// nolint: dupl
func (o *BCSLabel) Delete(db *gorm.DB) error {
	return db.Delete(o).Error
}

// All is an autogenerated method
// nolint: dupl
func (qs BCSLabelQuerySet) All(ret *[]BCSLabel) error {
	return qs.db.Find(ret).Error
}

// Count is an autogenerated method
// nolint: dupl
func (qs BCSLabelQuerySet) Count() (int, error) {
	var count int
	err := qs.db.Count(&count).Error
	return count, err
}

// Delete is an autogenerated method
// nolint: dupl
func (qs BCSLabelQuerySet) Delete() error {
	return qs.db.Delete(BCSLabel{}).Error
}

// DeleteNum is an autogenerated method
// nolint: dupl
func (qs BCSLabelQuerySet) DeleteNum() (int64, error) {
	db := qs.db.Delete(BCSLabel{})
	return db.RowsAffected, db.Error
}

// DeleteNumUnscoped is an autogenerated method
// nolint: dupl
func (qs BCSLabelQuerySet) DeleteNumUnscoped() (int64, error) {
	db := qs.db.Unscoped().Delete(BCSLabel{})
	return db.RowsAffected, db.Error
}

// GetDB is an autogenerated method
// nolint: dupl
func (qs BCSLabelQuerySet) GetDB() *gorm.DB {
	return qs.db
}

// GetUpdater is an autogenerated method
// nolint: dupl
func (qs BCSLabelQuerySet) GetUpdater() BCSLabelUpdater {
	return NewBCSLabelUpdater(qs.db)
}

// HashIDEq is an autogenerated method
// nolint: dupl
func (qs BCSLabelQuerySet) HashIDEq(hashID uint) BCSLabelQuerySet {
	return qs.w(qs.db.Where("hash_id = ?", hashID))
}

// HashIDGt is an autogenerated method
// nolint: dupl
func (qs BCSLabelQuerySet) HashIDGt(hashID uint) BCSLabelQuerySet {
	return qs.w(qs.db.Where("hash_id > ?", hashID))
}

// HashIDGte is an autogenerated method
// nolint: dupl
func (qs BCSLabelQuerySet) HashIDGte(hashID uint) BCSLabelQuerySet {
	return qs.w(qs.db.Where("hash_id >= ?", hashID))
}

// HashIDIn is an autogenerated method
// nolint: dupl
func (qs BCSLabelQuerySet) HashIDIn(hashID ...uint) BCSLabelQuerySet {
	if len(hashID) == 0 {
		qs.db.AddError(errors.New("must at least pass one hashID in HashIDIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("hash_id IN (?)", hashID))
}

// HashIDLt is an autogenerated method
// nolint: dupl
func (qs BCSLabelQuerySet) HashIDLt(hashID uint) BCSLabelQuerySet {
	return qs.w(qs.db.Where("hash_id < ?", hashID))
}

// HashIDLte is an autogenerated method
// nolint: dupl
func (qs BCSLabelQuerySet) HashIDLte(hashID uint) BCSLabelQuerySet {
	return qs.w(qs.db.Where("hash_id <= ?", hashID))
}

// HashIDNe is an autogenerated method
// nolint: dupl
func (qs BCSLabelQuerySet) HashIDNe(hashID uint) BCSLabelQuerySet {
	return qs.w(qs.db.Where("hash_id != ?", hashID))
}

// HashIDNotIn is an autogenerated method
// nolint: dupl
func (qs BCSLabelQuerySet) HashIDNotIn(hashID ...uint) BCSLabelQuerySet {
	if len(hashID) == 0 {
		qs.db.AddError(errors.New("must at least pass one hashID in HashIDNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("hash_id NOT IN (?)", hashID))
}

// KeyEq is an autogenerated method
// nolint: dupl
func (qs BCSLabelQuerySet) KeyEq(key string) BCSLabelQuerySet {
	return qs.w(qs.db.Where("key = ?", key))
}

// KeyGt is an autogenerated method
// nolint: dupl
func (qs BCSLabelQuerySet) KeyGt(key string) BCSLabelQuerySet {
	return qs.w(qs.db.Where("key > ?", key))
}

// KeyGte is an autogenerated method
// nolint: dupl
func (qs BCSLabelQuerySet) KeyGte(key string) BCSLabelQuerySet {
	return qs.w(qs.db.Where("key >= ?", key))
}

// KeyIn is an autogenerated method
// nolint: dupl
func (qs BCSLabelQuerySet) KeyIn(key ...string) BCSLabelQuerySet {
	if len(key) == 0 {
		qs.db.AddError(errors.New("must at least pass one key in KeyIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("key IN (?)", key))
}

// KeyLike is an autogenerated method
// nolint: dupl
func (qs BCSLabelQuerySet) KeyLike(key string) BCSLabelQuerySet {
	return qs.w(qs.db.Where("key LIKE ?", key))
}

// KeyLt is an autogenerated method
// nolint: dupl
func (qs BCSLabelQuerySet) KeyLt(key string) BCSLabelQuerySet {
	return qs.w(qs.db.Where("key < ?", key))
}

// KeyLte is an autogenerated method
// nolint: dupl
func (qs BCSLabelQuerySet) KeyLte(key string) BCSLabelQuerySet {
	return qs.w(qs.db.Where("key <= ?", key))
}

// KeyNe is an autogenerated method
// nolint: dupl
func (qs BCSLabelQuerySet) KeyNe(key string) BCSLabelQuerySet {
	return qs.w(qs.db.Where("key != ?", key))
}

// KeyNotIn is an autogenerated method
// nolint: dupl
func (qs BCSLabelQuerySet) KeyNotIn(key ...string) BCSLabelQuerySet {
	if len(key) == 0 {
		qs.db.AddError(errors.New("must at least pass one key in KeyNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("key NOT IN (?)", key))
}

// KeyNotlike is an autogenerated method
// nolint: dupl
func (qs BCSLabelQuerySet) KeyNotlike(key string) BCSLabelQuerySet {
	return qs.w(qs.db.Where("key NOT LIKE ?", key))
}

// Limit is an autogenerated method
// nolint: dupl
func (qs BCSLabelQuerySet) Limit(limit int) BCSLabelQuerySet {
	return qs.w(qs.db.Limit(limit))
}

// Offset is an autogenerated method
// nolint: dupl
func (qs BCSLabelQuerySet) Offset(offset int) BCSLabelQuerySet {
	return qs.w(qs.db.Offset(offset))
}

// One is used to retrieve one result. It returns gorm.ErrRecordNotFound
// if nothing was fetched
func (qs BCSLabelQuerySet) One(ret *BCSLabel) error {
	return qs.db.First(ret).Error
}

// OrderAscByHashID is an autogenerated method
// nolint: dupl
func (qs BCSLabelQuerySet) OrderAscByHashID() BCSLabelQuerySet {
	return qs.w(qs.db.Order("hash_id ASC"))
}

// OrderAscByKey is an autogenerated method
// nolint: dupl
func (qs BCSLabelQuerySet) OrderAscByKey() BCSLabelQuerySet {
	return qs.w(qs.db.Order("key ASC"))
}

// OrderAscByValue is an autogenerated method
// nolint: dupl
func (qs BCSLabelQuerySet) OrderAscByValue() BCSLabelQuerySet {
	return qs.w(qs.db.Order("value ASC"))
}

// OrderDescByHashID is an autogenerated method
// nolint: dupl
func (qs BCSLabelQuerySet) OrderDescByHashID() BCSLabelQuerySet {
	return qs.w(qs.db.Order("hash_id DESC"))
}

// OrderDescByKey is an autogenerated method
// nolint: dupl
func (qs BCSLabelQuerySet) OrderDescByKey() BCSLabelQuerySet {
	return qs.w(qs.db.Order("key DESC"))
}

// OrderDescByValue is an autogenerated method
// nolint: dupl
func (qs BCSLabelQuerySet) OrderDescByValue() BCSLabelQuerySet {
	return qs.w(qs.db.Order("value DESC"))
}

// ValueEq is an autogenerated method
// nolint: dupl
func (qs BCSLabelQuerySet) ValueEq(value string) BCSLabelQuerySet {
	return qs.w(qs.db.Where("value = ?", value))
}

// ValueGt is an autogenerated method
// nolint: dupl
func (qs BCSLabelQuerySet) ValueGt(value string) BCSLabelQuerySet {
	return qs.w(qs.db.Where("value > ?", value))
}

// ValueGte is an autogenerated method
// nolint: dupl
func (qs BCSLabelQuerySet) ValueGte(value string) BCSLabelQuerySet {
	return qs.w(qs.db.Where("value >= ?", value))
}

// ValueIn is an autogenerated method
// nolint: dupl
func (qs BCSLabelQuerySet) ValueIn(value ...string) BCSLabelQuerySet {
	if len(value) == 0 {
		qs.db.AddError(errors.New("must at least pass one value in ValueIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("value IN (?)", value))
}

// ValueLike is an autogenerated method
// nolint: dupl
func (qs BCSLabelQuerySet) ValueLike(value string) BCSLabelQuerySet {
	return qs.w(qs.db.Where("value LIKE ?", value))
}

// ValueLt is an autogenerated method
// nolint: dupl
func (qs BCSLabelQuerySet) ValueLt(value string) BCSLabelQuerySet {
	return qs.w(qs.db.Where("value < ?", value))
}

// ValueLte is an autogenerated method
// nolint: dupl
func (qs BCSLabelQuerySet) ValueLte(value string) BCSLabelQuerySet {
	return qs.w(qs.db.Where("value <= ?", value))
}

// ValueNe is an autogenerated method
// nolint: dupl
func (qs BCSLabelQuerySet) ValueNe(value string) BCSLabelQuerySet {
	return qs.w(qs.db.Where("value != ?", value))
}

// ValueNotIn is an autogenerated method
// nolint: dupl
func (qs BCSLabelQuerySet) ValueNotIn(value ...string) BCSLabelQuerySet {
	if len(value) == 0 {
		qs.db.AddError(errors.New("must at least pass one value in ValueNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("value NOT IN (?)", value))
}

// ValueNotlike is an autogenerated method
// nolint: dupl
func (qs BCSLabelQuerySet) ValueNotlike(value string) BCSLabelQuerySet {
	return qs.w(qs.db.Where("value NOT LIKE ?", value))
}

// SetHashID is an autogenerated method
// nolint: dupl
func (u BCSLabelUpdater) SetHashID(hashID uint) BCSLabelUpdater {
	u.fields[string(BCSLabelDBSchema.HashID)] = hashID
	return u
}

// SetKey is an autogenerated method
// nolint: dupl
func (u BCSLabelUpdater) SetKey(key string) BCSLabelUpdater {
	u.fields[string(BCSLabelDBSchema.Key)] = key
	return u
}

// SetValue is an autogenerated method
// nolint: dupl
func (u BCSLabelUpdater) SetValue(value string) BCSLabelUpdater {
	u.fields[string(BCSLabelDBSchema.Value)] = value
	return u
}

// Update is an autogenerated method
// nolint: dupl
func (u BCSLabelUpdater) Update() error {
	return u.db.Updates(u.fields).Error
}

// UpdateNum is an autogenerated method
// nolint: dupl
func (u BCSLabelUpdater) UpdateNum() (int64, error) {
	db := u.db.Updates(u.fields)
	return db.RowsAffected, db.Error
}

// ===== END of query set BCSLabelQuerySet

// ===== BEGIN of BCSLabel modifiers

// BCSLabelDBSchemaField describes database schema field. It requires for method 'Update'
type BCSLabelDBSchemaField string

// String method returns string representation of field.
// nolint: dupl
func (f BCSLabelDBSchemaField) String() string {
	return string(f)
}

// BCSLabelDBSchema stores db field names of BCSLabel
var BCSLabelDBSchema = struct {
	HashID BCSLabelDBSchemaField
	Key    BCSLabelDBSchemaField
	Value  BCSLabelDBSchemaField
}{

	HashID: BCSLabelDBSchemaField("hash_id"),
	Key:    BCSLabelDBSchemaField("key"),
	Value:  BCSLabelDBSchemaField("value"),
}

// Update updates BCSLabel fields by primary key
// nolint: dupl
func (o *BCSLabel) Update(db *gorm.DB, fields ...BCSLabelDBSchemaField) error {
	dbNameToFieldName := map[string]interface{}{
		"hash_id": o.HashID,
		"key":     o.Key,
		"value":   o.Value,
	}
	u := map[string]interface{}{}
	for _, f := range fields {
		fs := f.String()
		u[fs] = dbNameToFieldName[fs]
	}
	if err := db.Model(o).Updates(u).Error; err != nil {
		if err == gorm.ErrRecordNotFound {
			return err
		}

		return fmt.Errorf("can't update BCSLabel %v fields %v: %s",
			o, fields, err)
	}

	return nil
}

// BCSLabelUpdater is an BCSLabel updates manager
type BCSLabelUpdater struct {
	fields map[string]interface{}
	db     *gorm.DB
}

// NewBCSLabelUpdater creates new BCSLabel updater
// nolint: dupl
func NewBCSLabelUpdater(db *gorm.DB) BCSLabelUpdater {
	return BCSLabelUpdater{
		fields: map[string]interface{}{},
		db:     db.Model(&BCSLabel{}),
	}
}

// ===== END of BCSLabel modifiers

// ===== END of all query sets
