// Tencent is pleased to support the open source community by making
// 蓝鲸智云 - 监控平台 (BlueKing - Monitor) available.
// Copyright (C) 2022 THL A29 Limited, a Tencent company. All rights reserved.
// Licensed under the MIT License (the "License"); you may not use this file except in compliance with the License.
// You may obtain a copy of the License at http://opensource.org/licenses/MIT
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.

// Code generated by MockGen. DO NOT EDIT.
// Source: transfer/influxdb (interfaces: Client)

// Package testsuite is a generated GoMock package.
package testsuite

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	client "github.com/influxdata/influxdb/client/v2"
)

// MockInfluxDBClient is a mock of Client interface.
type MockInfluxDBClient struct {
	ctrl     *gomock.Controller
	recorder *MockInfluxDBClientMockRecorder
}

// MockInfluxDBClientMockRecorder is the mock recorder for MockInfluxDBClient.
type MockInfluxDBClientMockRecorder struct {
	mock *MockInfluxDBClient
}

// NewMockInfluxDBClient creates a new mock instance.
func NewMockInfluxDBClient(ctrl *gomock.Controller) *MockInfluxDBClient {
	mock := &MockInfluxDBClient{ctrl: ctrl}
	mock.recorder = &MockInfluxDBClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInfluxDBClient) EXPECT() *MockInfluxDBClientMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockInfluxDBClient) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockInfluxDBClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockInfluxDBClient)(nil).Close))
}

// Ping mocks base method.
func (m *MockInfluxDBClient) Ping(arg0 time.Duration) (time.Duration, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", arg0)
	ret0, _ := ret[0].(time.Duration)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Ping indicates an expected call of Ping.
func (mr *MockInfluxDBClientMockRecorder) Ping(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockInfluxDBClient)(nil).Ping), arg0)
}

// Query mocks base method.
func (m *MockInfluxDBClient) Query(arg0 client.Query) (*client.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query", arg0)
	ret0, _ := ret[0].(*client.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query.
func (mr *MockInfluxDBClientMockRecorder) Query(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockInfluxDBClient)(nil).Query), arg0)
}

// QueryAsChunk mocks base method.
func (m *MockInfluxDBClient) QueryAsChunk(arg0 client.Query) (*client.ChunkedResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryAsChunk", arg0)
	ret0, _ := ret[0].(*client.ChunkedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryAsChunk indicates an expected call of QueryAsChunk.
func (mr *MockInfluxDBClientMockRecorder) QueryAsChunk(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryAsChunk", reflect.TypeOf((*MockInfluxDBClient)(nil).QueryAsChunk), arg0)
}

// Write mocks base method.
func (m *MockInfluxDBClient) Write(arg0 client.BatchPoints) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write.
func (mr *MockInfluxDBClientMockRecorder) Write(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockInfluxDBClient)(nil).Write), arg0)
}
